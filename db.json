{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/mathjax.js","path":"js/mathjax.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_bg.png","path":"img/sidebar_bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.png","path":"img/upyun_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.jpg","path":"img/daily_pic.jpg","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/vker.jpg","path":"img/vker.jpg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.png","path":"img/footer/footer_ico-bilibili.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.png","path":"img/footer/footer_ico-facebook.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.png","path":"img/footer/footer_ico-instagram.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.png","path":"img/footer/footer_ico-linkedin.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.png","path":"img/footer/footer_ico-tumblr.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.png","path":"img/footer/footer_ico-telegram.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.png","path":"img/footer/footer_ico-gplus.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.png","path":"img/footer/footer_ico-zhihu.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.png","path":"img/footer/footer_ico-weibo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.png","path":"img/footer/footer_ico-twitter.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.png","path":"img/footer/footer_ico-github.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/1.png","path":"img/random/1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/13.png","path":"img/random/13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/2.png","path":"img/random/2.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/23.png","path":"img/random/23.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/26.png","path":"img/random/26.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/27.png","path":"img/random/27.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/3.png","path":"img/random/3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/35.png","path":"img/random/35.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/4.png","path":"img/random/4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/5.png","path":"img/random/5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/6.png","path":"img/random/6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/10.png","path":"img/random/10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/11.png","path":"img/random/11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/15.png","path":"img/random/15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/21.png","path":"img/random/21.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/24.png","path":"img/random/24.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/30.png","path":"img/random/30.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/32.png","path":"img/random/32.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/33.png","path":"img/random/33.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/31.png","path":"img/random/31.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/34.png","path":"img/random/34.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/37.png","path":"img/random/37.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/7.png","path":"img/random/7.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/38.png","path":"img/random/38.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/8.png","path":"img/random/8.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/9.png","path":"img/random/9.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/12.png","path":"img/random/12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/25.png","path":"img/random/25.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/36.png","path":"img/random/36.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/18.png","path":"img/random/18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/17.png","path":"img/random/17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/16.png","path":"img/random/16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/19.png","path":"img/random/19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/20.png","path":"img/random/20.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/22.png","path":"img/random/22.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/28.png","path":"img/random/28.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/29.png","path":"img/random/29.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/14.png","path":"img/random/14.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/material/.DS_Store","hash":"cf94eeaaae15e109776337c641a4d45793ccc014","modified":1491924744000},{"_id":"source/CNAME","hash":"bdf550e5575a09a012bb995e6f907f0ad392356e","modified":1479490328000},{"_id":"source/.DS_Store","hash":"8cf79c9b37e966f385a24562030a05a9b8258fd3","modified":1491924683000},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1491922158000},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1491922158000},{"_id":"themes/material/_config.yml","hash":"4d823ad17d009e43c0802efecdaa37f1f9f6a2c2","modified":1491924746000},{"_id":"themes/material/_config1.yml","hash":"76c5a2279d589d0ab27bd22eef6e2408e1acd25a","modified":1491923275000},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1491922158000},{"_id":"themes/material/README.md","hash":"6a923654c0a277bc69e05199e8402236055e008f","modified":1491922158000},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1491922158000},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1491922158000},{"_id":"themes/material/package.json","hash":"70735fb11fb59c266e0ac3168555e47dd9865504","modified":1491922158000},{"_id":"source/_posts/Spring-Aop总结.md","hash":"9140ba5ad61ca8c5a091bcc4b043d80ccdac893b","modified":1487163733000},{"_id":"source/_posts/.DS_Store","hash":"e5e24834a80f17010b54630ad05db9e8fc1ab2f3","modified":1491924721000},{"_id":"source/_posts/hexo搭建过程和中间遇到的若干问题.md","hash":"493b81f51e0d319accbf88c7df2b1cb7c6a72de4","modified":1487163766000},{"_id":"source/_posts/Spring源码解析学习一.md","hash":"c239088cd4ff700b29c7c7527ed96376cfa1463a","modified":1483198568000},{"_id":"source/_posts/profile-spring根据环境动态配置.md","hash":"08764870bbcc9b1540703ad289dad5e173f2f9b5","modified":1483198568000},{"_id":"source/_posts/java基础拾遗.md","hash":"1140def5f39df859e9008f1312a2819d377bc183","modified":1490098653000},{"_id":"source/about/.DS_Store","hash":"4b1737e2d95536850ac239b97c1d4b1deae9a602","modified":1490097479000},{"_id":"source/about/index.md","hash":"00a36d295e0ea6377a76619bbd4b9c82c498e8e6","modified":1490538137000},{"_id":"source/tags/.DS_Store","hash":"3c53b2c565bd2509c0f10de86c095e760eb28f90","modified":1490540027000},{"_id":"source/_posts/图片转字符画.md","hash":"ce49b4506c27c06bde1c06b1fe22ea1fa75d9e1b","modified":1487163750000},{"_id":"source/_posts/再见,2016!.md","hash":"36afd380bdcc0063c5113e8424c130714eb4bab0","modified":1483198568000},{"_id":"source/tags/index.md","hash":"9b56df49567995474fe24b7a2902934147e94c7d","modified":1490540023000},{"_id":"source/_posts/spring项目中使用yml作为配置文件的配置方式和属性注入的方法.md","hash":"092915f0bbff6f6a8aac7061e6f760c41a70cc88","modified":1487853282000},{"_id":"themes/material/languages/.DS_Store","hash":"e02b0819f140c60f008cb9dec1b1b9dac2c9e1c4","modified":1491923421000},{"_id":"themes/material/languages/ar.yml","hash":"6df33c661d97cb096a2b8a338fd42c6b7cf72e19","modified":1491922158000},{"_id":"themes/material/languages/de.yml","hash":"d7483dc78b2477de3f1d5b4675ff12f2bd47b937","modified":1491922158000},{"_id":"themes/material/languages/en.yml","hash":"518822aada4fbe8f5af85243d5e0b73b79a288d3","modified":1491922158000},{"_id":"themes/material/languages/es.yml","hash":"e24ab8de3d9cd71548adefa11b179ab0c6e3dd2c","modified":1491922158000},{"_id":"themes/material/languages/fr.yml","hash":"dd8c477e656c50e9dced6b7f439d284392213d2b","modified":1491922158000},{"_id":"themes/material/languages/ja.yml","hash":"062cfff0e32bdb64f27f6f18e552d118eabdf95a","modified":1491922158000},{"_id":"themes/material/languages/ms.yml","hash":"c78fd5335e9008e1195c5784b597b68c1d39429a","modified":1491922158000},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1491922158000},{"_id":"themes/material/languages/zh-TW.yml","hash":"cbd420929699cf6be1d05b211a151e17e87dfc87","modified":1491922158000},{"_id":"themes/material/languages/pt-BR.yml","hash":"ce712c6d79c3d3243b5ae189d2fa7c0adfcb8a25","modified":1491922158000},{"_id":"themes/material/languages/zh-CN.yml","hash":"7e1acb427a8f24753d2583368db05355837b8e2d","modified":1491922158000},{"_id":"themes/material/layout/post.ejs","hash":"3d4f506e8def5b776a904dcfefe9ac1eca3fae76","modified":1491922158000},{"_id":"themes/material/layout/layout.ejs","hash":"0a5926ca361e8ce1bb4aadab112ba3b486f21716","modified":1491922158000},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491922158000},{"_id":"themes/material/source/.DS_Store","hash":"79750757c7ec359a18785915a3609fb1af898690","modified":1491923103000},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"45eb5dc723d36e32553038422061cba6828957a1","modified":1491922158000},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"b5d558738b27ba16fef80399cc56a50e26c49f26","modified":1491922158000},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"27acecc8a603a5dc7ccd9e08bd7084439b15f6ec","modified":1491922158000},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1491922158000},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"36d3798224bf7dff7c0659876c5ad8a4785198e2","modified":1491922158000},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"5c46780e439d6ae86e602ad41fe178b288cab9c0","modified":1491922158000},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"c4aaeebf103dc5131ca2fe5039ae92e40fe86a29","modified":1491922158000},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"be73b6e10da780defc535ad4503129be8eb2befc","modified":1491922158000},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"22f377c0ba70d930a66dfcc775f216a560746996","modified":1491922158000},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"e1e9ae721a0f513848dcadfcd351fefbad524bee","modified":1491922158000},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"82a5f8dc6855d0d25ddfafd1a7ecce46da8208f2","modified":1491922158000},{"_id":"themes/material/layout/_partial/head.ejs","hash":"c9cfe7ef2582f8b91fc00060aa50d26eac0a8e04","modified":1491922158000},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"dfcb4d7fc0ee401613f7fa2ef22614e3e4ba3305","modified":1491922158000},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"a794e79790594be252d6528631f378c063025d8d","modified":1491922158000},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"5214273ce0a7888a3c1330ca2a9bc8622ece132d","modified":1491922158000},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"22d99afc913db8555306b23206394f424c36df62","modified":1491922158000},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1491922158000},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"a09351ec6a42d406b1f7641301ba338249c34568","modified":1491922158000},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"02374b20989c81031e29257d872624d5195ddcbd","modified":1491922158000},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"e5c1271b94d66597812cdf88057c8690bfe72d55","modified":1491922158000},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"ea7ff13f099ebd9a0caad26621f4a23b26b72309","modified":1491922158000},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1491922158000},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"7b291719414408a9ec0b9167a2c6c834f90905b3","modified":1491922158000},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"2f9d670b17e7763ae595593e9881284dc6c1bada","modified":1491922158000},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"38bbf3c7b3606845905b854a1649a481a1239ddd","modified":1491922158000},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1491922158000},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"eaedc9861342f9f4c85bf86aed7b9b9627887bac","modified":1491922158000},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"d18344f05712f66e0385839e4d83d5a3a515c140","modified":1491922158000},{"_id":"themes/material/layout/_widget/duoshuo.ejs","hash":"ae09d002bf5d3517ccde7f580dde20e0d47f627f","modified":1491922158000},{"_id":"themes/material/layout/_widget/disqus_click.ejs","hash":"ff0fd6dfd4fe38b08c031373bee0fa0b76a41385","modified":1491922158000},{"_id":"themes/material/layout/_widget/disqus.ejs","hash":"64be5e0ac74b012b91f70bbfbaec42fa663d4c13","modified":1491922158000},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1491922158000},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"630796a1377a3a0fc378baa377b05926f6e0b8f4","modified":1491922158000},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"f0cd9956fde4437fecb01e322ff025ad307c240a","modified":1491922158000},{"_id":"themes/material/layout/_widget/changyan.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1491922158000},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"75ce946ba9717ede360035853f5de873f00b57cb","modified":1491922158000},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"99b5fe45a1130f961a299ed4bf35e2c4a38a0d21","modified":1491922158000},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"7d4131dbecb4168f9b0ab536278b7e7bcafba4f2","modified":1491922158000},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"4cd6f3bc8278a6f1010f485d52e1f0ba7bf00fb4","modified":1491922158000},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"475c507773be23c87e63e22d8474ead06a5ebd49","modified":1491922158000},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"c363e3c208eae18e7c440160790fafba110fa9c9","modified":1491922158000},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9040f18f96dcc0ac44cb2b4d3b53bc6630207279","modified":1491922158000},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e184ca7f8519936903248b7797d281fad35b9521","modified":1491922158000},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1491922158000},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1491922158000},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1491922158000},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1491922158000},{"_id":"themes/material/source/css/uc.css","hash":"7609828f93973d1a6d3ba4b38d94688a92a6a6c5","modified":1491922158000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1491922158000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1491922158000},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1491922158000},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1491922158000},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1491922158000},{"_id":"themes/material/source/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1491922158000},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1491922158000},{"_id":"themes/material/source/img/.DS_Store","hash":"950a849e712caefaeadd8e463c03d559b0d81958","modified":1487851042000},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1487850699000},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1491922158000},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1491922158000},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1487850699000},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1487850699000},{"_id":"themes/material/source/img/head.jpg","hash":"9edd09de1aad96e66a93ff96fa53fccf48f1d737","modified":1479488605000},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1487850699000},{"_id":"themes/material/source/img/sidebar_bg.png","hash":"6bca464d8b191972ece89928165b30f932798d13","modified":1479526754000},{"_id":"themes/material/source/img/upyun_logo.png","hash":"aee4e90c4e2e72ef7036668c52dabcd8d028ee2f","modified":1487850699000},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1487850699000},{"_id":"themes/material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1491922158000},{"_id":"themes/material/source/css/style.min.css","hash":"25874013ac8a604058ddbe58cb33a2e3fa5b9b3c","modified":1491922158000},{"_id":"themes/material/source/css/style.css","hash":"b423b687cfa2723554b7b42eab799a69ababa978","modified":1491922158000},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1491922158000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1491922158000},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1491922158000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1491922158000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1491922158000},{"_id":"themes/material/source/js/js.js","hash":"4634558bdb27ca5a2f728d6ff57590fbd91af6f1","modified":1491922158000},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1491922158000},{"_id":"themes/material/source/img/daily_pic.jpg","hash":"1167a0107c3b8602d02af9551a0b7a1b671e0b58","modified":1479524267000},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1487850699000},{"_id":"themes/material/source/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1491922158000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1491922158000},{"_id":"themes/material/source/img/bg.jpg","hash":"bef153d529e69c8139e06912f071f77eb29b7973","modified":1479481024000},{"_id":"themes/material/source/js/js.min.js","hash":"a06e88ba0f594bc67be1618f9d0c203369d53700","modified":1491922158000},{"_id":"themes/material/source/img/vker.jpg","hash":"9fb405897072f865a6959f9d0b1308f23d04ea78","modified":1479491644000},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1491922158000},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1491922158000},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1487850699000},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1487850699000},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.png","hash":"f922bc4606f4ecb3ec2bc1b2bfa092643ffa2e37","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-facebook.png","hash":"66f959829d878794e66fd0e40c0d6bd843cc0cde","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-instagram.png","hash":"e8ec64e6f2639aec952e8e4d2944d5173f62e720","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.png","hash":"3d93bb435053b93243e3c259c448caf4ed00627e","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.png","hash":"447421c1dcced081fa5fb0355421b7bc71fe3f76","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-telegram.png","hash":"1095c5279c498412ee314f4469768636e82148cb","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-gplus.png","hash":"20971cbed2ebf58b9e3b087051f7fc56073da31d","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.png","hash":"6b94cdb6e0a69e169baec6e22fe3a6e51b7ba4b5","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-weibo.png","hash":"8d46998b88f57a2d92effaa65e97ee36906396c2","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-twitter.png","hash":"98b6529d3e08d5d086a4df85c20265c4517ec9a8","modified":1487850699000},{"_id":"themes/material/source/img/footer/footer_ico-github.png","hash":"4488aa8fc794beaba3e4c80d1f1b9d6c218b31ab","modified":1487850699000},{"_id":"themes/material/source/img/random/1.png","hash":"062df9c2b23c0a83faaea5db4a58cf73841ac789","modified":1479476438000},{"_id":"themes/material/source/img/random/13.png","hash":"0badee9512a89ba863358e80c6fb3b9928279f97","modified":1416013222000},{"_id":"themes/material/source/img/random/2.png","hash":"561793a0daf8b071d217960489935c2a87d7d55e","modified":1479476438000},{"_id":"themes/material/source/img/random/23.png","hash":"9f2bb9a684d306f67a9c241bae089796ec46e319","modified":1467058712000},{"_id":"themes/material/source/img/random/26.png","hash":"6f48cd405ee7b32f3aee5ec76761eca3425f320a","modified":1410542046000},{"_id":"themes/material/source/img/random/27.png","hash":"5477a38020465eafab00220698e3b98adcf4a284","modified":1411748202000},{"_id":"themes/material/source/img/random/3.png","hash":"0cccb7647a07fe363f0512d20b18fd9cd3d89eb7","modified":1479476438000},{"_id":"themes/material/source/img/random/35.png","hash":"d440ac863ea4c3dde199e0f6b391b18382aa91ba","modified":1410972396000},{"_id":"themes/material/source/img/random/4.png","hash":"8dcd26ffa8a6601fd15df52f9dcb63824c187227","modified":1479476438000},{"_id":"themes/material/source/img/random/5.png","hash":"9bffa58e6e021c6e4a67cba714210b8fbb7f7989","modified":1479476438000},{"_id":"themes/material/source/img/random/6.png","hash":"2ca4f763deedf423c14b174f97b1f879b3ab5b92","modified":1416054838000},{"_id":"themes/material/source/img/random/10.png","hash":"ecf81989baa8d20fbc7c9e5f674661192ae9d87e","modified":1416012260000},{"_id":"themes/material/source/img/random/11.png","hash":"a934d667e4d714badce5487e95a2c1cb20edbfff","modified":1416054838000},{"_id":"themes/material/source/img/random/15.png","hash":"bd846e30581f9699a7ff27c1296cc1e9d801ba35","modified":1416013068000},{"_id":"themes/material/source/img/random/21.png","hash":"81455dd22dadf3a47eb03c3595927ce048158962","modified":1467058712000},{"_id":"themes/material/source/img/random/24.png","hash":"7c7cb87d282ec02385741466e1f4b1f71336ee0f","modified":1467058712000},{"_id":"themes/material/source/img/random/30.png","hash":"73800382af4fb159f97c850d403a486e883c2b30","modified":1411979236000},{"_id":"themes/material/source/img/random/32.png","hash":"1c994396ea53055d786ed41ec3e9f33404dff94c","modified":1411991010000},{"_id":"themes/material/source/img/random/33.png","hash":"ef7c1e3a416f0a01bfef35a1da180998852735ae","modified":1411509408000},{"_id":"themes/material/source/img/random/31.png","hash":"4e948090535a506d92d3467eb59bae0c7057cc50","modified":1411979154000},{"_id":"themes/material/source/img/random/34.png","hash":"d1396d67788ea460e8756c0b5e24f15a40da389a","modified":1410615454000},{"_id":"themes/material/source/img/random/37.png","hash":"85189eca0a9ab8b75283d77cf139229d47ad1f1d","modified":1410972230000},{"_id":"themes/material/source/img/random/7.png","hash":"00755f0a94b56df4013e315744efa1379e1461b4","modified":1416054838000},{"_id":"themes/material/source/img/random/38.png","hash":"ee15e7a1fe34b8823db55c76db87f7741dfd4465","modified":1410972286000},{"_id":"themes/material/source/img/random/8.png","hash":"2a79af22b1208ab19742071b8befd355710111af","modified":1416054838000},{"_id":"themes/material/source/img/random/9.png","hash":"b86c3345f7150ec864aa18b9a1e20f1897188dea","modified":1416011852000},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1487850699000},{"_id":"themes/material/source/img/random/material-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1487850699000},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1487850699000},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1487850699000},{"_id":"themes/material/source/img/random/material-4.png","hash":"171d9290b89a8e102d33f5a5c3f2d003cc20fe9f","modified":1487850699000},{"_id":"themes/material/source/img/random/material-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1487850699000},{"_id":"themes/material/source/img/random/12.png","hash":"a44560d7bd0a7411cb4d4c38ad02169f630af7e2","modified":1416012652000},{"_id":"themes/material/source/img/random/25.png","hash":"f6f4a4781666089bc5cf66d0025ce9127e8e7721","modified":1409226220000},{"_id":"themes/material/source/img/random/36.png","hash":"2be37d56ca1d6c9935931e935892e1d4427852b1","modified":1413546662000},{"_id":"themes/material/source/img/random/material-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1487850699000},{"_id":"themes/material/source/img/random/material-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1487850699000},{"_id":"themes/material/source/img/random/material-3.png","hash":"a7f86a309712b9bbb01a4b7b39b1ee429df9086a","modified":1487850699000},{"_id":"themes/material/source/img/random/material-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1487850699000},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1491922158000},{"_id":"themes/material/source/img/random/18.png","hash":"2d42c2d47163f582f512d6bb15776b12853bf2f2","modified":1416054838000},{"_id":"themes/material/source/img/random/17.png","hash":"fb5d24cfdf0842510f177b605bc1a306e7b1a02d","modified":1413944210000},{"_id":"themes/material/source/img/random/16.png","hash":"f27ee5ebd53c489a48cfef14da0c605734aefbfd","modified":1413046168000},{"_id":"themes/material/source/img/random/19.png","hash":"40c38b155f6d4dea12ad482a3e9971b606dcc1c3","modified":1416013174000},{"_id":"themes/material/source/img/random/20.png","hash":"2b2e789f9f82e66797b414f95767e98c9b7168f2","modified":1467058712000},{"_id":"themes/material/source/img/random/22.png","hash":"0dee2dde2e0943237f386357c71a1bedc2b90e05","modified":1467058712000},{"_id":"themes/material/source/img/random/28.png","hash":"c9c98fdfac1b96d413d1b6ba8710fde6b4fdfece","modified":1467058714000},{"_id":"themes/material/source/img/random/29.png","hash":"0fce73201e44779bcc72a9810764d79dabcbf0d9","modified":1412842810000},{"_id":"themes/material/source/img/random/material-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1487850699000},{"_id":"themes/material/source/img/random/material-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1487850699000},{"_id":"themes/material/source/img/random/material-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1487850699000},{"_id":"themes/material/source/img/random/14.png","hash":"e326f354822b722a13508532da48185a694e9996","modified":1414772650000},{"_id":"themes/material/source/img/random/material-1.png","hash":"af4b0ad72ce30f3fd7f7435cd3267b9187335ffd","modified":1487850699000},{"_id":"themes/material/source/img/random/material-2.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1487850699000},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1491922158000},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1491922158000},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1491922158000},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1491922158000},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1491922158000},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1491922158000},{"_id":"themes/material/source/img/random/material-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1487850699000},{"_id":"themes/material/source/img/random/material-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1487850699000},{"_id":"themes/material/source/img/random/material-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1487850699000},{"_id":"themes/material/source/img/random/material-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1487850699000},{"_id":"public/atom.xml","hash":"dffdc99551ed587bf8cd7731a99e60b59648622f","modified":1491924755601},{"_id":"public/search.xml","hash":"8dd8772b1186216cdb9147730a8d0b16ffeddd7c","modified":1491924755601},{"_id":"public/about/index.html","hash":"fa6bab79afff374ebd6276ee1c92434690e944a7","modified":1491924756018},{"_id":"public/2016/11/19/图片转字符画/index.html","hash":"cc4c581ab56d1d41a496bd25b51a7539106074da","modified":1491924756020},{"_id":"public/2016/11/19/hexo搭建过程和中间遇到的若干问题/index.html","hash":"71cdfefdcb2ac6d77791ab68bf6cc49bafb5da0b","modified":1491924756416},{"_id":"public/2016/11/20/Spring-Aop总结/index.html","hash":"ac36fe7579d6885fa78be0d4376e62457d49126b","modified":1491924756416},{"_id":"public/2016/11/22/Spring源码解析学习一/index.html","hash":"779ca309f068df6b126f2772ff3d98712ef19969","modified":1491924756431},{"_id":"public/tags/index.html","hash":"4212c9e45657fa3817a5714faebe3eaddd952fb2","modified":1491924756431},{"_id":"public/2016/12/13/profile-spring根据环境动态配置/index.html","hash":"3c30ae3a93af13892c4c97ff9471ff6153f02a86","modified":1491924756432},{"_id":"public/2016/12/31/再见,2016!/index.html","hash":"7d76c7e7a94ed3c1b516ca54e4445ce83e9e0e58","modified":1491924756432},{"_id":"public/2017/02/15/spring项目中使用yml作为配置文件的配置方式和属性注入的方法/index.html","hash":"8c6ae7628058f491bb807703e09bd615f9973a20","modified":1491924756458},{"_id":"public/2017/03/21/java基础拾遗/index.html","hash":"36307465945143e72fa6c89b9e3772708f978657","modified":1491924756458},{"_id":"public/archives/index.html","hash":"6c88d8eca4ab696e75e901c9b2a7fd6a890628eb","modified":1491924756458},{"_id":"public/archives/2016/index.html","hash":"6e536d050010b8b5044c02e396dfe7e799a93fea","modified":1491924756458},{"_id":"public/archives/2016/11/index.html","hash":"cbf70133ef895d27f5ab98f6f86db6836a027519","modified":1491924756459},{"_id":"public/archives/2016/12/index.html","hash":"c860297bcf03731c823f5a358f7197e564bd0a97","modified":1491924756459},{"_id":"public/archives/2017/index.html","hash":"6a181a4500ef1b1be55458a185ddceddea3b32fd","modified":1491924756459},{"_id":"public/archives/2017/02/index.html","hash":"ac50011c8da4b583d681e12c0c51205a240310cc","modified":1491924756459},{"_id":"public/archives/2017/03/index.html","hash":"4a2771c692018a8bd3dd1b3d49c8cc327a6055e3","modified":1491924756460},{"_id":"public/categories/spring框架/index.html","hash":"e25dfb0fb6b04df4c7ca46186d7bf5f8ce0ea4aa","modified":1491924756460},{"_id":"public/categories/博客/index.html","hash":"e02c464862694d5a4f22a65ba290d3c1c5f3ffae","modified":1491924756460},{"_id":"public/categories/javaweb/index.html","hash":"d38a5cb0b49ca58b4bd1bdfda6289e67d10d4279","modified":1491924756460},{"_id":"public/categories/java基础/index.html","hash":"2350e0cf8dba0f8a1ba35ec96a31cafb64ff34df","modified":1491924756460},{"_id":"public/categories/个人总结/index.html","hash":"d26f7fa6688a1a8d73c0e4493d0c356eff75cebd","modified":1491924756460},{"_id":"public/categories/工具类/index.html","hash":"d18f55a1240e816f30359f268e680ca193d5bf23","modified":1491924756460},{"_id":"public/index.html","hash":"b729a678030d5e79e11da287d56a5c7bcd7d9a05","modified":1491924756460},{"_id":"public/tags/spring/index.html","hash":"e1b47fa4173ba2bfab8287be7761958ef4927579","modified":1491924756460},{"_id":"public/tags/aop/index.html","hash":"353a8c828e7cfa54119c4aec2befc799346b8d82","modified":1491924756461},{"_id":"public/tags/hexo/index.html","hash":"e148ced4eaf9b73c91f1df8c84ce35612f41878d","modified":1491924756461},{"_id":"public/tags/nodejs/index.html","hash":"9e0807cb424c802549e5c991160d281a7a50e197","modified":1491924756461},{"_id":"public/tags/mac/index.html","hash":"9d0cd2bf7c241fd06c90796489c7b8e43f107e21","modified":1491924756461},{"_id":"public/tags/ioc/index.html","hash":"ef37ee9b43bc573d36d348f9323e853071ccee58","modified":1491924756461},{"_id":"public/tags/profile/index.html","hash":"8af12e728e643a10192da3bf138c480d65fdfdb1","modified":1491924756461},{"_id":"public/tags/java/index.html","hash":"4eb5d298fd5621740d6d0fce5908f87c0aaaf39f","modified":1491924756461},{"_id":"public/tags/jvm/index.html","hash":"b540144c256f858cad4eb3abd9dd51c184625f8c","modified":1491924756462},{"_id":"public/tags/脑图/index.html","hash":"8ea8cf3bb5c64b8a643bfa733f17dd55a2921a3e","modified":1491924756462},{"_id":"public/tags/年终总结/index.html","hash":"db2a2fba5a1cb7947c67ac521d5e0ddcd0669151","modified":1491924756462},{"_id":"public/tags/2016/index.html","hash":"598a210562ac8e3c4e94f26dbfae4c6706c513b3","modified":1491924756462},{"_id":"public/tags/yml/index.html","hash":"5f3a6d67441fa1b471c608ccd4585949117d3cf9","modified":1491924756462},{"_id":"public/tags/Spring-boot/index.html","hash":"4b0e76a0e44042052e8b41ec72c61081d21e4381","modified":1491924756462},{"_id":"public/CNAME","hash":"bdf550e5575a09a012bb995e6f907f0ad392356e","modified":1491924756462},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1491924756462},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1491924756462},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1491924756463},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1491924756463},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1491924756463},{"_id":"public/img/head.jpg","hash":"9edd09de1aad96e66a93ff96fa53fccf48f1d737","modified":1491924756463},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1491924756463},{"_id":"public/img/upyun_logo.png","hash":"aee4e90c4e2e72ef7036668c52dabcd8d028ee2f","modified":1491924756463},{"_id":"public/img/sidebar_bg.png","hash":"6bca464d8b191972ece89928165b30f932798d13","modified":1491924756463},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1491924756463},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1491924756463},{"_id":"public/img/footer/footer_ico-bilibili.png","hash":"f922bc4606f4ecb3ec2bc1b2bfa092643ffa2e37","modified":1491924756463},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1491924756464},{"_id":"public/img/footer/footer_ico-facebook.png","hash":"66f959829d878794e66fd0e40c0d6bd843cc0cde","modified":1491924756464},{"_id":"public/img/footer/footer_ico-linkedin.png","hash":"3d93bb435053b93243e3c259c448caf4ed00627e","modified":1491924756464},{"_id":"public/img/footer/footer_ico-instagram.png","hash":"e8ec64e6f2639aec952e8e4d2944d5173f62e720","modified":1491924756464},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1491924756464},{"_id":"public/img/footer/footer_ico-tumblr.png","hash":"447421c1dcced081fa5fb0355421b7bc71fe3f76","modified":1491924756464},{"_id":"public/img/footer/footer_ico-telegram.png","hash":"1095c5279c498412ee314f4469768636e82148cb","modified":1491924756464},{"_id":"public/img/footer/footer_ico-gplus.png","hash":"20971cbed2ebf58b9e3b087051f7fc56073da31d","modified":1491924756464},{"_id":"public/img/footer/footer_ico-zhihu.png","hash":"6b94cdb6e0a69e169baec6e22fe3a6e51b7ba4b5","modified":1491924756464},{"_id":"public/img/footer/footer_ico-weibo.png","hash":"8d46998b88f57a2d92effaa65e97ee36906396c2","modified":1491924756464},{"_id":"public/img/footer/footer_ico-twitter.png","hash":"98b6529d3e08d5d086a4df85c20265c4517ec9a8","modified":1491924756464},{"_id":"public/img/footer/footer_ico-github.png","hash":"4488aa8fc794beaba3e4c80d1f1b9d6c218b31ab","modified":1491924756464},{"_id":"public/img/random/1.png","hash":"062df9c2b23c0a83faaea5db4a58cf73841ac789","modified":1491924756464},{"_id":"public/img/random/13.png","hash":"0badee9512a89ba863358e80c6fb3b9928279f97","modified":1491924756465},{"_id":"public/img/random/2.png","hash":"561793a0daf8b071d217960489935c2a87d7d55e","modified":1491924756465},{"_id":"public/img/random/23.png","hash":"9f2bb9a684d306f67a9c241bae089796ec46e319","modified":1491924756465},{"_id":"public/img/random/26.png","hash":"6f48cd405ee7b32f3aee5ec76761eca3425f320a","modified":1491924756465},{"_id":"public/img/random/27.png","hash":"5477a38020465eafab00220698e3b98adcf4a284","modified":1491924756465},{"_id":"public/img/random/3.png","hash":"0cccb7647a07fe363f0512d20b18fd9cd3d89eb7","modified":1491924756465},{"_id":"public/img/random/35.png","hash":"d440ac863ea4c3dde199e0f6b391b18382aa91ba","modified":1491924756465},{"_id":"public/img/random/4.png","hash":"8dcd26ffa8a6601fd15df52f9dcb63824c187227","modified":1491924756465},{"_id":"public/img/random/5.png","hash":"9bffa58e6e021c6e4a67cba714210b8fbb7f7989","modified":1491924756465},{"_id":"public/img/random/6.png","hash":"2ca4f763deedf423c14b174f97b1f879b3ab5b92","modified":1491924756466},{"_id":"public/css/prism.css","hash":"bed3a85b4fb53bc89e65e42ec62b9ce3e907fc80","modified":1491924756466},{"_id":"public/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1491924756492},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1491924756497},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1491924756500},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1491924756500},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1491924756501},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1491924756501},{"_id":"public/img/bg.jpg","hash":"bef153d529e69c8139e06912f071f77eb29b7973","modified":1491924756501},{"_id":"public/img/daily_pic.jpg","hash":"1167a0107c3b8602d02af9551a0b7a1b671e0b58","modified":1491924756501},{"_id":"public/img/vker.jpg","hash":"9fb405897072f865a6959f9d0b1308f23d04ea78","modified":1491924756501},{"_id":"public/img/random/10.png","hash":"ecf81989baa8d20fbc7c9e5f674661192ae9d87e","modified":1491924756501},{"_id":"public/img/random/15.png","hash":"bd846e30581f9699a7ff27c1296cc1e9d801ba35","modified":1491924756502},{"_id":"public/img/random/24.png","hash":"7c7cb87d282ec02385741466e1f4b1f71336ee0f","modified":1491924756502},{"_id":"public/img/random/21.png","hash":"81455dd22dadf3a47eb03c3595927ce048158962","modified":1491924756502},{"_id":"public/img/random/11.png","hash":"a934d667e4d714badce5487e95a2c1cb20edbfff","modified":1491924756502},{"_id":"public/img/random/30.png","hash":"73800382af4fb159f97c850d403a486e883c2b30","modified":1491924756502},{"_id":"public/img/random/32.png","hash":"1c994396ea53055d786ed41ec3e9f33404dff94c","modified":1491924756503},{"_id":"public/img/random/34.png","hash":"d1396d67788ea460e8756c0b5e24f15a40da389a","modified":1491924756503},{"_id":"public/img/random/31.png","hash":"4e948090535a506d92d3467eb59bae0c7057cc50","modified":1491924756503},{"_id":"public/img/random/33.png","hash":"ef7c1e3a416f0a01bfef35a1da180998852735ae","modified":1491924756503},{"_id":"public/img/random/37.png","hash":"85189eca0a9ab8b75283d77cf139229d47ad1f1d","modified":1491924756503},{"_id":"public/img/random/8.png","hash":"2a79af22b1208ab19742071b8befd355710111af","modified":1491924756503},{"_id":"public/img/random/38.png","hash":"ee15e7a1fe34b8823db55c76db87f7741dfd4465","modified":1491924756504},{"_id":"public/img/random/9.png","hash":"b86c3345f7150ec864aa18b9a1e20f1897188dea","modified":1491924756504},{"_id":"public/img/random/7.png","hash":"00755f0a94b56df4013e315744efa1379e1461b4","modified":1491924756504},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1491924756504},{"_id":"public/img/random/material-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1491924756504},{"_id":"public/img/random/material-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1491924756504},{"_id":"public/img/random/material-4.png","hash":"171d9290b89a8e102d33f5a5c3f2d003cc20fe9f","modified":1491924756504},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1491924756505},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1491924756505},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1491924756519},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1491924756519},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1491924756519},{"_id":"public/css/uc.css","hash":"7609828f93973d1a6d3ba4b38d94688a92a6a6c5","modified":1491924756519},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1491924756519},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1491924756519},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1491924756519},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1491924756519},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1491924756520},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1491924756520},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1491924756520},{"_id":"public/js/mathjax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1491924756520},{"_id":"public/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1491924756520},{"_id":"public/css/style.css","hash":"b423b687cfa2723554b7b42eab799a69ababa978","modified":1491924756520},{"_id":"public/css/style.min.css","hash":"25874013ac8a604058ddbe58cb33a2e3fa5b9b3c","modified":1491924756520},{"_id":"public/js/js.js","hash":"4634558bdb27ca5a2f728d6ff57590fbd91af6f1","modified":1491924756520},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1491924756520},{"_id":"public/css/material.css","hash":"19818d637ecb3bae73d16ee90444c42fe4458b54","modified":1491924756520},{"_id":"public/js/js.min.js","hash":"a06e88ba0f594bc67be1618f9d0c203369d53700","modified":1491924756521},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1491924756521},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1491924756521},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1491924756521},{"_id":"public/img/random/36.png","hash":"2be37d56ca1d6c9935931e935892e1d4427852b1","modified":1491924756521},{"_id":"public/img/random/25.png","hash":"f6f4a4781666089bc5cf66d0025ce9127e8e7721","modified":1491924756522},{"_id":"public/img/random/material-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1491924756522},{"_id":"public/img/random/material-3.png","hash":"a7f86a309712b9bbb01a4b7b39b1ee429df9086a","modified":1491924756522},{"_id":"public/img/random/material-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1491924756523},{"_id":"public/img/random/12.png","hash":"a44560d7bd0a7411cb4d4c38ad02169f630af7e2","modified":1491924756523},{"_id":"public/img/random/material-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1491924756523},{"_id":"public/img/random/18.png","hash":"2d42c2d47163f582f512d6bb15776b12853bf2f2","modified":1491924756534},{"_id":"public/img/random/16.png","hash":"f27ee5ebd53c489a48cfef14da0c605734aefbfd","modified":1491924756534},{"_id":"public/img/random/17.png","hash":"fb5d24cfdf0842510f177b605bc1a306e7b1a02d","modified":1491924756535},{"_id":"public/img/random/19.png","hash":"40c38b155f6d4dea12ad482a3e9971b606dcc1c3","modified":1491924756535},{"_id":"public/img/random/20.png","hash":"2b2e789f9f82e66797b414f95767e98c9b7168f2","modified":1491924756536},{"_id":"public/img/random/28.png","hash":"c9c98fdfac1b96d413d1b6ba8710fde6b4fdfece","modified":1491924756537},{"_id":"public/img/random/material-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1491924756537},{"_id":"public/img/random/29.png","hash":"0fce73201e44779bcc72a9810764d79dabcbf0d9","modified":1491924756538},{"_id":"public/img/random/22.png","hash":"0dee2dde2e0943237f386357c71a1bedc2b90e05","modified":1491924756538},{"_id":"public/img/random/material-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1491924756539},{"_id":"public/img/random/material-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1491924756540},{"_id":"public/img/random/14.png","hash":"e326f354822b722a13508532da48185a694e9996","modified":1491924756575},{"_id":"public/img/random/material-2.png","hash":"c5fc2ec66660f48be0fb092a872d4058e9d9e68f","modified":1491924756575},{"_id":"public/img/random/material-1.png","hash":"af4b0ad72ce30f3fd7f7435cd3267b9187335ffd","modified":1491924756576},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1491924756587},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1491924756624},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1491924756624},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1491924756625},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1491924756626},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1491924756627},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1491924756628},{"_id":"public/img/random/material-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1491924756632},{"_id":"public/img/random/material-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1491924756655},{"_id":"public/img/random/material-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1491924756655},{"_id":"public/img/random/material-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1491924756666}],"Category":[{"name":"spring框架","_id":"cj1dph81a0004engtl5zvignk"},{"name":"博客","_id":"cj1dph81x0009engt8vegze38"},{"name":"javaweb","_id":"cj1dph825000eengt28doncx0"},{"name":"java基础","_id":"cj1dph82j000nengtfvbpaps8"},{"name":"个人总结","_id":"cj1dph82m000qengtv1jjhcbv"},{"name":"工具类","_id":"cj1dph82t000zengtbwi6vbjc"}],"Data":[],"Page":[{"title":"Vker小站","date":"2016-11-18T16:03:15.000Z","tags":["Vker"],"categories":"关于我","thumbnail":"/img/vker.jpg","_content":"> pdf加载可能需要时间,对此造成的不便,深表歉意.\n\n{% pdf /pdf/汪萌萌的简历.pdf %}\n\n\n","source":"about/index.md","raw":"---\ntitle: Vker小站\ndate: 2016-11-19 00:03:15\ntags: [Vker]\ncategories: 关于我\nthumbnail: /img/vker.jpg\n---\n> pdf加载可能需要时间,对此造成的不便,深表歉意.\n\n{% pdf /pdf/汪萌萌的简历.pdf %}\n\n\n","updated":"2017-03-26T14:22:17.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj1dph80w0001engt7z7h015n","content":"<blockquote>\n<p>pdf加载可能需要时间,对此造成的不便,深表歉意.</p>\n</blockquote>\n\n\n\t<div class=\"row\">\n    <embed src=\"/pdf/汪萌萌的简历.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>pdf加载可能需要时间,对此造成的不便,深表歉意.</p>\n</blockquote>\n\n\n\t<div class=\"row\">\n    <embed src=\"/pdf/汪萌萌的简历.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n"},{"title":"tags","date":"2017-04-11T15:26:06.000Z","layout":"tags","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate:\nlayout: tags\n---\n\n","updated":"2017-03-26T14:53:43.000Z","path":"tags/index.html","comments":1,"_id":"cj1dph8130003engtvp46ygk7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Spring-Aop总结","date":"2016-11-20T02:57:48.000Z","_content":"> 路漫漫其修远兮，吾将上下而求索。　　　屈原--《离骚》\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=28661549&auto=1&height=66\"></iframe>\n\n# 前言\n　　工作也一年出头了,深觉spring在java web开发中的重要地位,而spring-aop又是spring框架提供的一种重要特性,可以极大的提高开发的效率.但是日常工作中却基本没有应用到,深感遗憾,所以整理一些平时网上看到的教程,以备日后不时之需.\n＞　文中内容基本转载于[水门-kay的spring源码分析](https://my.oschina.net/kaywu123/blog/626135)\n# Spring-Aop简介\n　　[AOP](http://spring.cndocs.tk/aop.html)（Aspect-Oriented Programming，面向切面的编程），谈起AOP，则一定会追溯到OOP（Object Oriented Programming,面向对象编程），因为AOP可以说是对OOP的补充和完善，而这一切的理念都是从模块化开始的。OOP是一种非常成功、极具表现力的编程范式，它将概念自然地表达为对象，从而将其中通用的代码模块化。所以，衡量OOP成功与否的标准就是它在多大程度上避免了代码的重复。一般情况下，OOP能够很好地避免代码重复。具体继承可以帮助我们在不同类型之间共享相同的行为；多态让我们可以用同样的方式来处理不同类型之间的对象，能够让我们将注意力集中在他们的共同之处。但当遇上一些特定问题的时候，比如，当我们需要为分散的对象引入公共行为时，OOP就显得很无力了。也就是说，OOP很适合你定义从上到下的关系，但不适合定义水平的关系。可以说因为有这些Bug的存在，是AOP生成的直接诱因，所以是为了弥补OOP而存在的。AOP在看待应用程序结构的方式上与OOP是截然不同的，以AOP的思路来看，系统是被分解成方面（Aspect）或者关注点（Concern），而不是一个个对象。追根溯源，与OOP一样，AOP只不过是一种全新的模块化机制而已，他的主要作用是用来描述分散在对象、类或函数中的横切关注点，从关注点中分离出横切关注点则是 AOP的核心概念。\n　　AOP的原理，也是非常简单的，即通过分离关注点让解决特定领域问题的代码从业务逻辑中独立出来，业务逻辑的代码中就不再含有针对特定领域问题代码的调用，业务逻辑同特定领域问题的关系则通过切面来封装、维护，这样原本分散在整个应用程序中的代码就可以很好的进行管理了。例如：在使用公共函数的时候，往往需要进行一些逻辑设计，也就时需要代码实现来支持，而这些逻辑代码也是需要维护的，在传统的公共子模块的调用中，除了直接调用以外就没有其他的手段。而相同的情况，在使用AOP后，不仅可以将这些重复的代码抽出来单独维护，而且可以在需要时进行统一调度，这样的使用方法虽然与设计公共子模块有几分相似，但他为这一类问题的解决提供了一整套完整的理论和灵活多样的实现方法。也就是说，在AOP提出横切概念以后，再把模块功能正交化的同时，也在此基础上提供了一系列横切的灵活实现。\n![spring-aop结构](http://ogw774xrt.bkt.clouddn.com/spring-aop%E7%BB%93%E6%9E%84.png)\n## spring-aop相关术语\n\n * 目标对象（Target）：包含连接点的对象。也被用来引用增强化或代理化对象。\n* 代理（Proxy）：AOP 框架创建的对象，包含增强。\n* 连接点（Joinpoint）：程序执行过程中明确的点，如方法的调用或特定的异常被抛出。\n* 切点（Pointcut）：指定一个通知将被引发的一系列连接点。AOP 框架必须允许开发者指定切入点：例如，使用正则表达式。\n* 增强（Advice）：在特定的连接点AOP框架执行的动作。各种类型的增强包括“around”、“before”、“throws”增强等等。增强类型将在下面讨论。许多 AOP 框架都是以拦截器做增强模型，维护一个“围绕”连接点的拦截器链。\n* 切面（Advisor）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事物管理是J2EE应用中横切关注点中一个很好的例子。切面一般是用 Advisor 或者 拦截器实现。\n*　织入（Weaving）：组装方面创建通知化对象。这可以在编译时完成（例如：使用AspectJ编译器），也可以在运行时完成。Spring 和其他一些纯 Java AOP 框架，使用运行时织入。\n* 引入（Introduction）：添加方法或字段到增强化类。\n*　接口（IsModified）：用于简化缓存。（这里作为补充）。\n\n## spring-aop的应用场景\n　　AOP在 权限（Authentication）、缓存（Cache）、内容传递（Context passing）、错误处理（Error handling）、懒加载（Lazy loading）、调试（Debug）、日志（Log）、跟踪优化和校准（tracing、profiling and monitoring）、性能优化（Performance optimization）、持久化（Persistence）、资源池（Resource pooling）、同步（Synchronization）、事务（Transactions）等方面都有用处，可以说是可使用范围及其广泛.\n\n## spring-aop增强类型\nAOP增强类型（也叫 通知类型）包括：\n* Before Advice（前置增强）：在一个连接点之前执行的增强，但这个增强不能阻止流程继续执行到连接点（除非它抛出一个异常）。\n* After Advice（后置增强，全称是 After returning advice 正常返回增强 ）：在连接点正常完成后执行的增强，例如，如果一个正常返回，没有抛出异常。如果抛出异常则不会执行。\n* Around Advice（环绕增强）：包围一个连接点的增强，如方法调用，是最强大的增强。在方法调用前后完成自定义的行为。它们负责选择继续执行连接点或直接返回它们自己的返回值或抛出异常来执行。\n* Throws Advice（抛出增强，全称是 After throwing advice 异常返回增强，也叫 Finally returning advice 最终返回增强）：是最常用的增强类型。大部分是基于拦截器框架如Nanning或者JBoss4提供的Around增强。作用是，不管，是否正常执行，都会返回增强中的内容。\n* Introduction Advice（引入增强）：一种非常特殊的增强。它将新的成员变量、成员方法引入到目标类中。它仅能作用于类层次，而不是方法层次，所以他不能作用于任何切入点。\n\n\n","source":"_posts/Spring-Aop总结.md","raw":"---\ntitle: Spring-Aop总结\ndate: 2016-11-20 10:57:48\ntags: [spring,aop]\ncategories: spring框架\n---\n> 路漫漫其修远兮，吾将上下而求索。　　　屈原--《离骚》\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=28661549&auto=1&height=66\"></iframe>\n\n# 前言\n　　工作也一年出头了,深觉spring在java web开发中的重要地位,而spring-aop又是spring框架提供的一种重要特性,可以极大的提高开发的效率.但是日常工作中却基本没有应用到,深感遗憾,所以整理一些平时网上看到的教程,以备日后不时之需.\n＞　文中内容基本转载于[水门-kay的spring源码分析](https://my.oschina.net/kaywu123/blog/626135)\n# Spring-Aop简介\n　　[AOP](http://spring.cndocs.tk/aop.html)（Aspect-Oriented Programming，面向切面的编程），谈起AOP，则一定会追溯到OOP（Object Oriented Programming,面向对象编程），因为AOP可以说是对OOP的补充和完善，而这一切的理念都是从模块化开始的。OOP是一种非常成功、极具表现力的编程范式，它将概念自然地表达为对象，从而将其中通用的代码模块化。所以，衡量OOP成功与否的标准就是它在多大程度上避免了代码的重复。一般情况下，OOP能够很好地避免代码重复。具体继承可以帮助我们在不同类型之间共享相同的行为；多态让我们可以用同样的方式来处理不同类型之间的对象，能够让我们将注意力集中在他们的共同之处。但当遇上一些特定问题的时候，比如，当我们需要为分散的对象引入公共行为时，OOP就显得很无力了。也就是说，OOP很适合你定义从上到下的关系，但不适合定义水平的关系。可以说因为有这些Bug的存在，是AOP生成的直接诱因，所以是为了弥补OOP而存在的。AOP在看待应用程序结构的方式上与OOP是截然不同的，以AOP的思路来看，系统是被分解成方面（Aspect）或者关注点（Concern），而不是一个个对象。追根溯源，与OOP一样，AOP只不过是一种全新的模块化机制而已，他的主要作用是用来描述分散在对象、类或函数中的横切关注点，从关注点中分离出横切关注点则是 AOP的核心概念。\n　　AOP的原理，也是非常简单的，即通过分离关注点让解决特定领域问题的代码从业务逻辑中独立出来，业务逻辑的代码中就不再含有针对特定领域问题代码的调用，业务逻辑同特定领域问题的关系则通过切面来封装、维护，这样原本分散在整个应用程序中的代码就可以很好的进行管理了。例如：在使用公共函数的时候，往往需要进行一些逻辑设计，也就时需要代码实现来支持，而这些逻辑代码也是需要维护的，在传统的公共子模块的调用中，除了直接调用以外就没有其他的手段。而相同的情况，在使用AOP后，不仅可以将这些重复的代码抽出来单独维护，而且可以在需要时进行统一调度，这样的使用方法虽然与设计公共子模块有几分相似，但他为这一类问题的解决提供了一整套完整的理论和灵活多样的实现方法。也就是说，在AOP提出横切概念以后，再把模块功能正交化的同时，也在此基础上提供了一系列横切的灵活实现。\n![spring-aop结构](http://ogw774xrt.bkt.clouddn.com/spring-aop%E7%BB%93%E6%9E%84.png)\n## spring-aop相关术语\n\n * 目标对象（Target）：包含连接点的对象。也被用来引用增强化或代理化对象。\n* 代理（Proxy）：AOP 框架创建的对象，包含增强。\n* 连接点（Joinpoint）：程序执行过程中明确的点，如方法的调用或特定的异常被抛出。\n* 切点（Pointcut）：指定一个通知将被引发的一系列连接点。AOP 框架必须允许开发者指定切入点：例如，使用正则表达式。\n* 增强（Advice）：在特定的连接点AOP框架执行的动作。各种类型的增强包括“around”、“before”、“throws”增强等等。增强类型将在下面讨论。许多 AOP 框架都是以拦截器做增强模型，维护一个“围绕”连接点的拦截器链。\n* 切面（Advisor）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事物管理是J2EE应用中横切关注点中一个很好的例子。切面一般是用 Advisor 或者 拦截器实现。\n*　织入（Weaving）：组装方面创建通知化对象。这可以在编译时完成（例如：使用AspectJ编译器），也可以在运行时完成。Spring 和其他一些纯 Java AOP 框架，使用运行时织入。\n* 引入（Introduction）：添加方法或字段到增强化类。\n*　接口（IsModified）：用于简化缓存。（这里作为补充）。\n\n## spring-aop的应用场景\n　　AOP在 权限（Authentication）、缓存（Cache）、内容传递（Context passing）、错误处理（Error handling）、懒加载（Lazy loading）、调试（Debug）、日志（Log）、跟踪优化和校准（tracing、profiling and monitoring）、性能优化（Performance optimization）、持久化（Persistence）、资源池（Resource pooling）、同步（Synchronization）、事务（Transactions）等方面都有用处，可以说是可使用范围及其广泛.\n\n## spring-aop增强类型\nAOP增强类型（也叫 通知类型）包括：\n* Before Advice（前置增强）：在一个连接点之前执行的增强，但这个增强不能阻止流程继续执行到连接点（除非它抛出一个异常）。\n* After Advice（后置增强，全称是 After returning advice 正常返回增强 ）：在连接点正常完成后执行的增强，例如，如果一个正常返回，没有抛出异常。如果抛出异常则不会执行。\n* Around Advice（环绕增强）：包围一个连接点的增强，如方法调用，是最强大的增强。在方法调用前后完成自定义的行为。它们负责选择继续执行连接点或直接返回它们自己的返回值或抛出异常来执行。\n* Throws Advice（抛出增强，全称是 After throwing advice 异常返回增强，也叫 Finally returning advice 最终返回增强）：是最常用的增强类型。大部分是基于拦截器框架如Nanning或者JBoss4提供的Around增强。作用是，不管，是否正常执行，都会返回增强中的内容。\n* Introduction Advice（引入增强）：一种非常特殊的增强。它将新的成员变量、成员方法引入到目标类中。它仅能作用于类层次，而不是方法层次，所以他不能作用于任何切入点。\n\n\n","slug":"Spring-Aop总结","published":1,"updated":"2017-02-15T13:02:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1dph80m0000engt05h9bw0p","content":"<blockquote>\n<p>路漫漫其修远兮，吾将上下而求索。　　　屈原–《离骚》</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=28661549&auto=1&height=66\"></iframe>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>　　工作也一年出头了,深觉spring在java web开发中的重要地位,而spring-aop又是spring框架提供的一种重要特性,可以极大的提高开发的效率.但是日常工作中却基本没有应用到,深感遗憾,所以整理一些平时网上看到的教程,以备日后不时之需.<br>＞　文中内容基本转载于<a href=\"https://my.oschina.net/kaywu123/blog/626135\" target=\"_blank\" rel=\"external\">水门-kay的spring源码分析</a></p>\n<h1 id=\"Spring-Aop简介\"><a href=\"#Spring-Aop简介\" class=\"headerlink\" title=\"Spring-Aop简介\"></a>Spring-Aop简介</h1><p>　　<a href=\"http://spring.cndocs.tk/aop.html\" target=\"_blank\" rel=\"external\">AOP</a>（Aspect-Oriented Programming，面向切面的编程），谈起AOP，则一定会追溯到OOP（Object Oriented Programming,面向对象编程），因为AOP可以说是对OOP的补充和完善，而这一切的理念都是从模块化开始的。OOP是一种非常成功、极具表现力的编程范式，它将概念自然地表达为对象，从而将其中通用的代码模块化。所以，衡量OOP成功与否的标准就是它在多大程度上避免了代码的重复。一般情况下，OOP能够很好地避免代码重复。具体继承可以帮助我们在不同类型之间共享相同的行为；多态让我们可以用同样的方式来处理不同类型之间的对象，能够让我们将注意力集中在他们的共同之处。但当遇上一些特定问题的时候，比如，当我们需要为分散的对象引入公共行为时，OOP就显得很无力了。也就是说，OOP很适合你定义从上到下的关系，但不适合定义水平的关系。可以说因为有这些Bug的存在，是AOP生成的直接诱因，所以是为了弥补OOP而存在的。AOP在看待应用程序结构的方式上与OOP是截然不同的，以AOP的思路来看，系统是被分解成方面（Aspect）或者关注点（Concern），而不是一个个对象。追根溯源，与OOP一样，AOP只不过是一种全新的模块化机制而已，他的主要作用是用来描述分散在对象、类或函数中的横切关注点，从关注点中分离出横切关注点则是 AOP的核心概念。<br>　　AOP的原理，也是非常简单的，即通过分离关注点让解决特定领域问题的代码从业务逻辑中独立出来，业务逻辑的代码中就不再含有针对特定领域问题代码的调用，业务逻辑同特定领域问题的关系则通过切面来封装、维护，这样原本分散在整个应用程序中的代码就可以很好的进行管理了。例如：在使用公共函数的时候，往往需要进行一些逻辑设计，也就时需要代码实现来支持，而这些逻辑代码也是需要维护的，在传统的公共子模块的调用中，除了直接调用以外就没有其他的手段。而相同的情况，在使用AOP后，不仅可以将这些重复的代码抽出来单独维护，而且可以在需要时进行统一调度，这样的使用方法虽然与设计公共子模块有几分相似，但他为这一类问题的解决提供了一整套完整的理论和灵活多样的实现方法。也就是说，在AOP提出横切概念以后，再把模块功能正交化的同时，也在此基础上提供了一系列横切的灵活实现。<br><img src=\"http://ogw774xrt.bkt.clouddn.com/spring-aop%E7%BB%93%E6%9E%84.png\" alt=\"spring-aop结构\"></p>\n<h2 id=\"spring-aop相关术语\"><a href=\"#spring-aop相关术语\" class=\"headerlink\" title=\"spring-aop相关术语\"></a>spring-aop相关术语</h2><ul>\n<li>目标对象（Target）：包含连接点的对象。也被用来引用增强化或代理化对象。<ul>\n<li>代理（Proxy）：AOP 框架创建的对象，包含增强。</li>\n<li>连接点（Joinpoint）：程序执行过程中明确的点，如方法的调用或特定的异常被抛出。</li>\n<li>切点（Pointcut）：指定一个通知将被引发的一系列连接点。AOP 框架必须允许开发者指定切入点：例如，使用正则表达式。</li>\n<li>增强（Advice）：在特定的连接点AOP框架执行的动作。各种类型的增强包括“around”、“before”、“throws”增强等等。增强类型将在下面讨论。许多 AOP 框架都是以拦截器做增强模型，维护一个“围绕”连接点的拦截器链。</li>\n<li>切面（Advisor）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事物管理是J2EE应用中横切关注点中一个很好的例子。切面一般是用 Advisor 或者 拦截器实现。<br>*　织入（Weaving）：组装方面创建通知化对象。这可以在编译时完成（例如：使用AspectJ编译器），也可以在运行时完成。Spring 和其他一些纯 Java AOP 框架，使用运行时织入。</li>\n<li>引入（Introduction）：添加方法或字段到增强化类。<br>*　接口（IsModified）：用于简化缓存。（这里作为补充）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"spring-aop的应用场景\"><a href=\"#spring-aop的应用场景\" class=\"headerlink\" title=\"spring-aop的应用场景\"></a>spring-aop的应用场景</h2><p>　　AOP在 权限（Authentication）、缓存（Cache）、内容传递（Context passing）、错误处理（Error handling）、懒加载（Lazy loading）、调试（Debug）、日志（Log）、跟踪优化和校准（tracing、profiling and monitoring）、性能优化（Performance optimization）、持久化（Persistence）、资源池（Resource pooling）、同步（Synchronization）、事务（Transactions）等方面都有用处，可以说是可使用范围及其广泛.</p>\n<h2 id=\"spring-aop增强类型\"><a href=\"#spring-aop增强类型\" class=\"headerlink\" title=\"spring-aop增强类型\"></a>spring-aop增强类型</h2><p>AOP增强类型（也叫 通知类型）包括：</p>\n<ul>\n<li>Before Advice（前置增强）：在一个连接点之前执行的增强，但这个增强不能阻止流程继续执行到连接点（除非它抛出一个异常）。</li>\n<li>After Advice（后置增强，全称是 After returning advice 正常返回增强 ）：在连接点正常完成后执行的增强，例如，如果一个正常返回，没有抛出异常。如果抛出异常则不会执行。</li>\n<li>Around Advice（环绕增强）：包围一个连接点的增强，如方法调用，是最强大的增强。在方法调用前后完成自定义的行为。它们负责选择继续执行连接点或直接返回它们自己的返回值或抛出异常来执行。</li>\n<li>Throws Advice（抛出增强，全称是 After throwing advice 异常返回增强，也叫 Finally returning advice 最终返回增强）：是最常用的增强类型。大部分是基于拦截器框架如Nanning或者JBoss4提供的Around增强。作用是，不管，是否正常执行，都会返回增强中的内容。</li>\n<li>Introduction Advice（引入增强）：一种非常特殊的增强。它将新的成员变量、成员方法引入到目标类中。它仅能作用于类层次，而不是方法层次，所以他不能作用于任何切入点。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>路漫漫其修远兮，吾将上下而求索。　　　屈原–《离骚》</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=28661549&auto=1&height=66\"></iframe>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>　　工作也一年出头了,深觉spring在java web开发中的重要地位,而spring-aop又是spring框架提供的一种重要特性,可以极大的提高开发的效率.但是日常工作中却基本没有应用到,深感遗憾,所以整理一些平时网上看到的教程,以备日后不时之需.<br>＞　文中内容基本转载于<a href=\"https://my.oschina.net/kaywu123/blog/626135\">水门-kay的spring源码分析</a></p>\n<h1 id=\"Spring-Aop简介\"><a href=\"#Spring-Aop简介\" class=\"headerlink\" title=\"Spring-Aop简介\"></a>Spring-Aop简介</h1><p>　　<a href=\"http://spring.cndocs.tk/aop.html\">AOP</a>（Aspect-Oriented Programming，面向切面的编程），谈起AOP，则一定会追溯到OOP（Object Oriented Programming,面向对象编程），因为AOP可以说是对OOP的补充和完善，而这一切的理念都是从模块化开始的。OOP是一种非常成功、极具表现力的编程范式，它将概念自然地表达为对象，从而将其中通用的代码模块化。所以，衡量OOP成功与否的标准就是它在多大程度上避免了代码的重复。一般情况下，OOP能够很好地避免代码重复。具体继承可以帮助我们在不同类型之间共享相同的行为；多态让我们可以用同样的方式来处理不同类型之间的对象，能够让我们将注意力集中在他们的共同之处。但当遇上一些特定问题的时候，比如，当我们需要为分散的对象引入公共行为时，OOP就显得很无力了。也就是说，OOP很适合你定义从上到下的关系，但不适合定义水平的关系。可以说因为有这些Bug的存在，是AOP生成的直接诱因，所以是为了弥补OOP而存在的。AOP在看待应用程序结构的方式上与OOP是截然不同的，以AOP的思路来看，系统是被分解成方面（Aspect）或者关注点（Concern），而不是一个个对象。追根溯源，与OOP一样，AOP只不过是一种全新的模块化机制而已，他的主要作用是用来描述分散在对象、类或函数中的横切关注点，从关注点中分离出横切关注点则是 AOP的核心概念。<br>　　AOP的原理，也是非常简单的，即通过分离关注点让解决特定领域问题的代码从业务逻辑中独立出来，业务逻辑的代码中就不再含有针对特定领域问题代码的调用，业务逻辑同特定领域问题的关系则通过切面来封装、维护，这样原本分散在整个应用程序中的代码就可以很好的进行管理了。例如：在使用公共函数的时候，往往需要进行一些逻辑设计，也就时需要代码实现来支持，而这些逻辑代码也是需要维护的，在传统的公共子模块的调用中，除了直接调用以外就没有其他的手段。而相同的情况，在使用AOP后，不仅可以将这些重复的代码抽出来单独维护，而且可以在需要时进行统一调度，这样的使用方法虽然与设计公共子模块有几分相似，但他为这一类问题的解决提供了一整套完整的理论和灵活多样的实现方法。也就是说，在AOP提出横切概念以后，再把模块功能正交化的同时，也在此基础上提供了一系列横切的灵活实现。<br><img src=\"http://ogw774xrt.bkt.clouddn.com/spring-aop%E7%BB%93%E6%9E%84.png\" alt=\"spring-aop结构\"></p>\n<h2 id=\"spring-aop相关术语\"><a href=\"#spring-aop相关术语\" class=\"headerlink\" title=\"spring-aop相关术语\"></a>spring-aop相关术语</h2><ul>\n<li>目标对象（Target）：包含连接点的对象。也被用来引用增强化或代理化对象。<ul>\n<li>代理（Proxy）：AOP 框架创建的对象，包含增强。</li>\n<li>连接点（Joinpoint）：程序执行过程中明确的点，如方法的调用或特定的异常被抛出。</li>\n<li>切点（Pointcut）：指定一个通知将被引发的一系列连接点。AOP 框架必须允许开发者指定切入点：例如，使用正则表达式。</li>\n<li>增强（Advice）：在特定的连接点AOP框架执行的动作。各种类型的增强包括“around”、“before”、“throws”增强等等。增强类型将在下面讨论。许多 AOP 框架都是以拦截器做增强模型，维护一个“围绕”连接点的拦截器链。</li>\n<li>切面（Advisor）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事物管理是J2EE应用中横切关注点中一个很好的例子。切面一般是用 Advisor 或者 拦截器实现。<br>*　织入（Weaving）：组装方面创建通知化对象。这可以在编译时完成（例如：使用AspectJ编译器），也可以在运行时完成。Spring 和其他一些纯 Java AOP 框架，使用运行时织入。</li>\n<li>引入（Introduction）：添加方法或字段到增强化类。<br>*　接口（IsModified）：用于简化缓存。（这里作为补充）。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"spring-aop的应用场景\"><a href=\"#spring-aop的应用场景\" class=\"headerlink\" title=\"spring-aop的应用场景\"></a>spring-aop的应用场景</h2><p>　　AOP在 权限（Authentication）、缓存（Cache）、内容传递（Context passing）、错误处理（Error handling）、懒加载（Lazy loading）、调试（Debug）、日志（Log）、跟踪优化和校准（tracing、profiling and monitoring）、性能优化（Performance optimization）、持久化（Persistence）、资源池（Resource pooling）、同步（Synchronization）、事务（Transactions）等方面都有用处，可以说是可使用范围及其广泛.</p>\n<h2 id=\"spring-aop增强类型\"><a href=\"#spring-aop增强类型\" class=\"headerlink\" title=\"spring-aop增强类型\"></a>spring-aop增强类型</h2><p>AOP增强类型（也叫 通知类型）包括：</p>\n<ul>\n<li>Before Advice（前置增强）：在一个连接点之前执行的增强，但这个增强不能阻止流程继续执行到连接点（除非它抛出一个异常）。</li>\n<li>After Advice（后置增强，全称是 After returning advice 正常返回增强 ）：在连接点正常完成后执行的增强，例如，如果一个正常返回，没有抛出异常。如果抛出异常则不会执行。</li>\n<li>Around Advice（环绕增强）：包围一个连接点的增强，如方法调用，是最强大的增强。在方法调用前后完成自定义的行为。它们负责选择继续执行连接点或直接返回它们自己的返回值或抛出异常来执行。</li>\n<li>Throws Advice（抛出增强，全称是 After throwing advice 异常返回增强，也叫 Finally returning advice 最终返回增强）：是最常用的增强类型。大部分是基于拦截器框架如Nanning或者JBoss4提供的Around增强。作用是，不管，是否正常执行，都会返回增强中的内容。</li>\n<li>Introduction Advice（引入增强）：一种非常特殊的增强。它将新的成员变量、成员方法引入到目标类中。它仅能作用于类层次，而不是方法层次，所以他不能作用于任何切入点。</li>\n</ul>\n"},{"title":"hexo搭建过程和中间遇到的若干问题","date":"2016-11-19T10:51:53.000Z","_content":"> 竹杖芒鞋轻胜马 一蓑烟雨任平生　　　--苏轼《定风波》\n\n# 开始\n　　本来我以前也用hexo搭建过一个博客,但是由于后来工作变得懒惰,加上搭建的时候刚接触到编程,对搭建过程一知半解,也没有很好的保存搭建的文件,github上只剩下编译后的文件,就放弃折腾了.偶然间发现[Material Theme](https://material.vss.im/)博客,加上本身自己是谷歌脑残粉,用过*nexus5*和*neuxs6*,对[material design](http://baike.baidu.com/view/13912767.htm)本身有莫名的好感,很喜欢这种有质感的设计,于是折腾了一晚上把这个博客搭建起来了.在这里主要记录一下自己在搭建过程中遇到的问题和找到的解决方案,也算为以后再做类似的工作提供一个解决思路.\n## 安装nodejs\n　　前往[nodejs](https://nodejs.org/en/)官网,根据系统下载相应版本的安装包,然后进行安装.安装完成以后通过以下命令检测是否安装成功,如果出现版本号,则证明安装成功.\n```bash\n$ node -v\n```\n\n## 安装hexo\n　　由于nodejs自带npm功能,可以通过以下命令安装hexo\n```bash\nnpm install -g hexo\n```\n[hexo文档](https://hexo.io/zh-cn/docs/deployment.html)\n 值得注意的是如果安装进度条一直不动,那是由于npm的安装源是国外的地址,需要翻墙才能正常使用,解决办法是讲npm的源更换到国内的地址,可以通过以下命令将源更换为淘宝的镜像.\n```bash\nnpm --registry http://npm.stdyun.com info underscore\n```\n同时在mac系统下如果出现类似下文的报错信息\n```\npm ERR! Error: EACCES: permission denied, access '/usr/local/lib/node_modules/npm/node_modules/ansi-styles'\nnpm ERR!     at Error (native)\nnpm ERR!  { [Error: EACCES: permission denied, access '/usr/local/lib/node_modules/npm/node_modules/ansi-styles']\nnpm ERR!   errno: -13,\nnpm ERR!   code: 'EACCES',\nnpm ERR!   syscall: 'access',\nnpm ERR!   path: '/usr/local/lib/node_modules/npm/node_modules/ansi-styles' }\n```\n则是由于权限不够,需要用sudo权限安装,命令如下:\n```bash\nsudo npm install -g hexo\n```\n\n　　安装完成以后,新建一个文件夹blog,然后在blog文件夹下打开终端/控制台,执行以下命令:\n```bash\nhexo init\n```\n等待hexo初始化完成以后blog文件夹下会出现以下文件,大致介绍一下.\n* themes 顾名思义主题文件夹,安装主题的位置.\n* source 新建博文和其他相关页面的保存位置.\n* scaffolds 博文模板保存位置,通过命令`hexo new 模板名 \"博文名\"`新建博文,会根据模板生产相应的初始化博文.\n* public 根据主题相关配置编译markdown格式的博文生成页面的保存位置,也就是说别人所看到的博客所有的内容都在这里.\n* node_modules hexo相关模块的保存位置.\n* package.json hexo个模块版本信息.\n* _config.yml 站点配置文件.配置如博客的名称,作者,语言等相关信息.\n\n然后可以开始安装主题了.\n## 安装material theme\n　　可以前往[material theme](https://material.vss.im/)官网查看安装方式以及相关教程,在这里就不一一赘述了,我用的是比较简单的一种方式,如下:\n```\nnpm install hexo-material\n```\n安装完成以后,可以在blog/node_modules找到hexo-material文件夹,讲hexo-material文件夹拷贝到blog/themes文件夹下.然后修改blog文件夹里的_config.yml,如下:\n```yml\ntheme:\n  hexo-material\n```\n\n## 本地预览博客\n　　一切准备就绪后,可以在本地预览博客,通过以下命令:\n```bash\nhexo g #编译生成\nhexo s #服务启动\n```\n然后访问[http://localhost:4000](http://localhost:4000)就可以看到属于你自己的博客了.\n\n## 安装集成服务\n### RSS\n```bash\nnpm install hexo-generator-feed --save\n```\n### search\n```bash\nnpm isntall hexo-generator-search --save\n```\n## DIY\n　　别急这只是刚刚开始,如果所有人都是这样的那怎么突出这个博客是专属我的呢,接下来让我们进行一些DIY.通过修改blog/themes/hexo-material文件夹下的_config.yml文件进行一下个性化的配置,注意不要跟blog下的_config.yml搞混了哦!可以参考[主题配置](https://material.vss.im/intro/)个性化你的博客.\n\n# 发布\n　　博客弄好了,怎么可以不放到网上与大家分享呢,参考以下文档[hexo部署](https://hexo.io/zh-cn/docs/deployment.html),将博客部署到[github](https://github.com/),最后绑定好你的域名[【Hexo+Github】域名和github绑定的问题](http://www.jianshu.com/p/1d427e888dda),一切大功告成了.\n　　好了,享受写作的快乐吧!如果有什么问题欢迎留言或者点击侧边栏里的Q ME与我联系.\n\n\n","source":"_posts/hexo搭建过程和中间遇到的若干问题.md","raw":"---\ntitle: hexo搭建过程和中间遇到的若干问题\ndate: 2016-11-19 18:51:53\ntags: [hexo,nodejs,mac]\ncategories: 博客\n---\n> 竹杖芒鞋轻胜马 一蓑烟雨任平生　　　--苏轼《定风波》\n\n# 开始\n　　本来我以前也用hexo搭建过一个博客,但是由于后来工作变得懒惰,加上搭建的时候刚接触到编程,对搭建过程一知半解,也没有很好的保存搭建的文件,github上只剩下编译后的文件,就放弃折腾了.偶然间发现[Material Theme](https://material.vss.im/)博客,加上本身自己是谷歌脑残粉,用过*nexus5*和*neuxs6*,对[material design](http://baike.baidu.com/view/13912767.htm)本身有莫名的好感,很喜欢这种有质感的设计,于是折腾了一晚上把这个博客搭建起来了.在这里主要记录一下自己在搭建过程中遇到的问题和找到的解决方案,也算为以后再做类似的工作提供一个解决思路.\n## 安装nodejs\n　　前往[nodejs](https://nodejs.org/en/)官网,根据系统下载相应版本的安装包,然后进行安装.安装完成以后通过以下命令检测是否安装成功,如果出现版本号,则证明安装成功.\n```bash\n$ node -v\n```\n\n## 安装hexo\n　　由于nodejs自带npm功能,可以通过以下命令安装hexo\n```bash\nnpm install -g hexo\n```\n[hexo文档](https://hexo.io/zh-cn/docs/deployment.html)\n 值得注意的是如果安装进度条一直不动,那是由于npm的安装源是国外的地址,需要翻墙才能正常使用,解决办法是讲npm的源更换到国内的地址,可以通过以下命令将源更换为淘宝的镜像.\n```bash\nnpm --registry http://npm.stdyun.com info underscore\n```\n同时在mac系统下如果出现类似下文的报错信息\n```\npm ERR! Error: EACCES: permission denied, access '/usr/local/lib/node_modules/npm/node_modules/ansi-styles'\nnpm ERR!     at Error (native)\nnpm ERR!  { [Error: EACCES: permission denied, access '/usr/local/lib/node_modules/npm/node_modules/ansi-styles']\nnpm ERR!   errno: -13,\nnpm ERR!   code: 'EACCES',\nnpm ERR!   syscall: 'access',\nnpm ERR!   path: '/usr/local/lib/node_modules/npm/node_modules/ansi-styles' }\n```\n则是由于权限不够,需要用sudo权限安装,命令如下:\n```bash\nsudo npm install -g hexo\n```\n\n　　安装完成以后,新建一个文件夹blog,然后在blog文件夹下打开终端/控制台,执行以下命令:\n```bash\nhexo init\n```\n等待hexo初始化完成以后blog文件夹下会出现以下文件,大致介绍一下.\n* themes 顾名思义主题文件夹,安装主题的位置.\n* source 新建博文和其他相关页面的保存位置.\n* scaffolds 博文模板保存位置,通过命令`hexo new 模板名 \"博文名\"`新建博文,会根据模板生产相应的初始化博文.\n* public 根据主题相关配置编译markdown格式的博文生成页面的保存位置,也就是说别人所看到的博客所有的内容都在这里.\n* node_modules hexo相关模块的保存位置.\n* package.json hexo个模块版本信息.\n* _config.yml 站点配置文件.配置如博客的名称,作者,语言等相关信息.\n\n然后可以开始安装主题了.\n## 安装material theme\n　　可以前往[material theme](https://material.vss.im/)官网查看安装方式以及相关教程,在这里就不一一赘述了,我用的是比较简单的一种方式,如下:\n```\nnpm install hexo-material\n```\n安装完成以后,可以在blog/node_modules找到hexo-material文件夹,讲hexo-material文件夹拷贝到blog/themes文件夹下.然后修改blog文件夹里的_config.yml,如下:\n```yml\ntheme:\n  hexo-material\n```\n\n## 本地预览博客\n　　一切准备就绪后,可以在本地预览博客,通过以下命令:\n```bash\nhexo g #编译生成\nhexo s #服务启动\n```\n然后访问[http://localhost:4000](http://localhost:4000)就可以看到属于你自己的博客了.\n\n## 安装集成服务\n### RSS\n```bash\nnpm install hexo-generator-feed --save\n```\n### search\n```bash\nnpm isntall hexo-generator-search --save\n```\n## DIY\n　　别急这只是刚刚开始,如果所有人都是这样的那怎么突出这个博客是专属我的呢,接下来让我们进行一些DIY.通过修改blog/themes/hexo-material文件夹下的_config.yml文件进行一下个性化的配置,注意不要跟blog下的_config.yml搞混了哦!可以参考[主题配置](https://material.vss.im/intro/)个性化你的博客.\n\n# 发布\n　　博客弄好了,怎么可以不放到网上与大家分享呢,参考以下文档[hexo部署](https://hexo.io/zh-cn/docs/deployment.html),将博客部署到[github](https://github.com/),最后绑定好你的域名[【Hexo+Github】域名和github绑定的问题](http://www.jianshu.com/p/1d427e888dda),一切大功告成了.\n　　好了,享受写作的快乐吧!如果有什么问题欢迎留言或者点击侧边栏里的Q ME与我联系.\n\n\n","slug":"hexo搭建过程和中间遇到的若干问题","published":1,"updated":"2017-02-15T13:02:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1dph80y0002engtesboodue","content":"<blockquote>\n<p>竹杖芒鞋轻胜马 一蓑烟雨任平生　　　–苏轼《定风波》</p>\n</blockquote>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><p>　　本来我以前也用hexo搭建过一个博客,但是由于后来工作变得懒惰,加上搭建的时候刚接触到编程,对搭建过程一知半解,也没有很好的保存搭建的文件,github上只剩下编译后的文件,就放弃折腾了.偶然间发现<a href=\"https://material.vss.im/\" target=\"_blank\" rel=\"external\">Material Theme</a>博客,加上本身自己是谷歌脑残粉,用过<em>nexus5</em>和<em>neuxs6</em>,对<a href=\"http://baike.baidu.com/view/13912767.htm\" target=\"_blank\" rel=\"external\">material design</a>本身有莫名的好感,很喜欢这种有质感的设计,于是折腾了一晚上把这个博客搭建起来了.在这里主要记录一下自己在搭建过程中遇到的问题和找到的解决方案,也算为以后再做类似的工作提供一个解决思路.</p>\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><p>　　前往<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">nodejs</a>官网,根据系统下载相应版本的安装包,然后进行安装.安装完成以后通过以下命令检测是否安装成功,如果出现版本号,则证明安装成功.</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">$ node -v\n</code></pre>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>　　由于nodejs自带npm功能,可以通过以下命令安装hexo</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo\n</code></pre>\n<p><a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"external\">hexo文档</a><br> 值得注意的是如果安装进度条一直不动,那是由于npm的安装源是国外的地址,需要翻墙才能正常使用,解决办法是讲npm的源更换到国内的地址,可以通过以下命令将源更换为淘宝的镜像.</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> --registry http://npm.stdyun.com info underscore\n</code></pre>\n<p>同时在mac系统下如果出现类似下文的报错信息</p>\n<pre><code>pm ERR! Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules/npm/node_modules/ansi-styles&#39;\nnpm ERR!     at Error (native)\nnpm ERR!  { [Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules/npm/node_modules/ansi-styles&#39;]\nnpm ERR!   errno: -13,\nnpm ERR!   code: &#39;EACCES&#39;,\nnpm ERR!   syscall: &#39;access&#39;,\nnpm ERR!   path: &#39;/usr/local/lib/node_modules/npm/node_modules/ansi-styles&#39; }\n</code></pre><p>则是由于权限不够,需要用sudo权限安装,命令如下:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo\n</code></pre>\n<p>　　安装完成以后,新建一个文件夹blog,然后在blog文件夹下打开终端/控制台,执行以下命令:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">hexo init\n</code></pre>\n<p>等待hexo初始化完成以后blog文件夹下会出现以下文件,大致介绍一下.</p>\n<ul>\n<li>themes 顾名思义主题文件夹,安装主题的位置.</li>\n<li>source 新建博文和其他相关页面的保存位置.</li>\n<li>scaffolds 博文模板保存位置,通过命令<code>hexo new 模板名 &quot;博文名&quot;</code>新建博文,会根据模板生产相应的初始化博文.</li>\n<li>public 根据主题相关配置编译markdown格式的博文生成页面的保存位置,也就是说别人所看到的博客所有的内容都在这里.</li>\n<li>node_modules hexo相关模块的保存位置.</li>\n<li>package.json hexo个模块版本信息.</li>\n<li>_config.yml 站点配置文件.配置如博客的名称,作者,语言等相关信息.</li>\n</ul>\n<p>然后可以开始安装主题了.</p>\n<h2 id=\"安装material-theme\"><a href=\"#安装material-theme\" class=\"headerlink\" title=\"安装material theme\"></a>安装material theme</h2><p>　　可以前往<a href=\"https://material.vss.im/\" target=\"_blank\" rel=\"external\">material theme</a>官网查看安装方式以及相关教程,在这里就不一一赘述了,我用的是比较简单的一种方式,如下:</p>\n<pre><code>npm install hexo-material\n</code></pre><p>安装完成以后,可以在blog/node_modules找到hexo-material文件夹,讲hexo-material文件夹拷贝到blog/themes文件夹下.然后修改blog文件夹里的_config.yml,如下:</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">theme:\n  hexo-material\n</code></pre>\n<h2 id=\"本地预览博客\"><a href=\"#本地预览博客\" class=\"headerlink\" title=\"本地预览博客\"></a>本地预览博客</h2><p>　　一切准备就绪后,可以在本地预览博客,通过以下命令:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">hexo g <span class=\"token comment\" spellcheck=\"true\">#编译生成</span>\nhexo s <span class=\"token comment\" spellcheck=\"true\">#服务启动</span>\n</code></pre>\n<p>然后访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a>就可以看到属于你自己的博客了.</p>\n<h2 id=\"安装集成服务\"><a href=\"#安装集成服务\" class=\"headerlink\" title=\"安装集成服务\"></a>安装集成服务</h2><h3 id=\"RSS\"><a href=\"#RSS\" class=\"headerlink\" title=\"RSS\"></a>RSS</h3><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-generator-feed --save\n</code></pre>\n<h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search\"></a>search</h3><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> isntall hexo-generator-search --save\n</code></pre>\n<h2 id=\"DIY\"><a href=\"#DIY\" class=\"headerlink\" title=\"DIY\"></a>DIY</h2><p>　　别急这只是刚刚开始,如果所有人都是这样的那怎么突出这个博客是专属我的呢,接下来让我们进行一些DIY.通过修改blog/themes/hexo-material文件夹下的_config.yml文件进行一下个性化的配置,注意不要跟blog下的_config.yml搞混了哦!可以参考<a href=\"https://material.vss.im/intro/\" target=\"_blank\" rel=\"external\">主题配置</a>个性化你的博客.</p>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><p>　　博客弄好了,怎么可以不放到网上与大家分享呢,参考以下文档<a href=\"https://hexo.io/zh-cn/docs/deployment.html\" target=\"_blank\" rel=\"external\">hexo部署</a>,将博客部署到<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">github</a>,最后绑定好你的域名<a href=\"http://www.jianshu.com/p/1d427e888dda\" target=\"_blank\" rel=\"external\">【Hexo+Github】域名和github绑定的问题</a>,一切大功告成了.<br>　　好了,享受写作的快乐吧!如果有什么问题欢迎留言或者点击侧边栏里的Q ME与我联系.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>竹杖芒鞋轻胜马 一蓑烟雨任平生　　　–苏轼《定风波》</p>\n</blockquote>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><p>　　本来我以前也用hexo搭建过一个博客,但是由于后来工作变得懒惰,加上搭建的时候刚接触到编程,对搭建过程一知半解,也没有很好的保存搭建的文件,github上只剩下编译后的文件,就放弃折腾了.偶然间发现<a href=\"https://material.vss.im/\">Material Theme</a>博客,加上本身自己是谷歌脑残粉,用过<em>nexus5</em>和<em>neuxs6</em>,对<a href=\"http://baike.baidu.com/view/13912767.htm\">material design</a>本身有莫名的好感,很喜欢这种有质感的设计,于是折腾了一晚上把这个博客搭建起来了.在这里主要记录一下自己在搭建过程中遇到的问题和找到的解决方案,也算为以后再做类似的工作提供一个解决思路.</p>\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><p>　　前往<a href=\"https://nodejs.org/en/\">nodejs</a>官网,根据系统下载相应版本的安装包,然后进行安装.安装完成以后通过以下命令检测是否安装成功,如果出现版本号,则证明安装成功.</p>\n<pre><code class=\"bash\">$ node -v\n</code></pre>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>　　由于nodejs自带npm功能,可以通过以下命令安装hexo</p>\n<pre><code class=\"bash\">npm install -g hexo\n</code></pre>\n<p><a href=\"https://hexo.io/zh-cn/docs/deployment.html\">hexo文档</a><br> 值得注意的是如果安装进度条一直不动,那是由于npm的安装源是国外的地址,需要翻墙才能正常使用,解决办法是讲npm的源更换到国内的地址,可以通过以下命令将源更换为淘宝的镜像.</p>\n<pre><code class=\"bash\">npm --registry http://npm.stdyun.com info underscore\n</code></pre>\n<p>同时在mac系统下如果出现类似下文的报错信息</p>\n<pre><code>pm ERR! Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules/npm/node_modules/ansi-styles&#39;\nnpm ERR!     at Error (native)\nnpm ERR!  { [Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules/npm/node_modules/ansi-styles&#39;]\nnpm ERR!   errno: -13,\nnpm ERR!   code: &#39;EACCES&#39;,\nnpm ERR!   syscall: &#39;access&#39;,\nnpm ERR!   path: &#39;/usr/local/lib/node_modules/npm/node_modules/ansi-styles&#39; }\n</code></pre><p>则是由于权限不够,需要用sudo权限安装,命令如下:</p>\n<pre><code class=\"bash\">sudo npm install -g hexo\n</code></pre>\n<p>　　安装完成以后,新建一个文件夹blog,然后在blog文件夹下打开终端/控制台,执行以下命令:</p>\n<pre><code class=\"bash\">hexo init\n</code></pre>\n<p>等待hexo初始化完成以后blog文件夹下会出现以下文件,大致介绍一下.</p>\n<ul>\n<li>themes 顾名思义主题文件夹,安装主题的位置.</li>\n<li>source 新建博文和其他相关页面的保存位置.</li>\n<li>scaffolds 博文模板保存位置,通过命令<code>hexo new 模板名 &quot;博文名&quot;</code>新建博文,会根据模板生产相应的初始化博文.</li>\n<li>public 根据主题相关配置编译markdown格式的博文生成页面的保存位置,也就是说别人所看到的博客所有的内容都在这里.</li>\n<li>node_modules hexo相关模块的保存位置.</li>\n<li>package.json hexo个模块版本信息.</li>\n<li>_config.yml 站点配置文件.配置如博客的名称,作者,语言等相关信息.</li>\n</ul>\n<p>然后可以开始安装主题了.</p>\n<h2 id=\"安装material-theme\"><a href=\"#安装material-theme\" class=\"headerlink\" title=\"安装material theme\"></a>安装material theme</h2><p>　　可以前往<a href=\"https://material.vss.im/\">material theme</a>官网查看安装方式以及相关教程,在这里就不一一赘述了,我用的是比较简单的一种方式,如下:</p>\n<pre><code>npm install hexo-material\n</code></pre><p>安装完成以后,可以在blog/node_modules找到hexo-material文件夹,讲hexo-material文件夹拷贝到blog/themes文件夹下.然后修改blog文件夹里的_config.yml,如下:</p>\n<pre><code class=\"yml\">theme:\n  hexo-material\n</code></pre>\n<h2 id=\"本地预览博客\"><a href=\"#本地预览博客\" class=\"headerlink\" title=\"本地预览博客\"></a>本地预览博客</h2><p>　　一切准备就绪后,可以在本地预览博客,通过以下命令:</p>\n<pre><code class=\"bash\">hexo g #编译生成\nhexo s #服务启动\n</code></pre>\n<p>然后访问<a href=\"http://localhost:4000\">http://localhost:4000</a>就可以看到属于你自己的博客了.</p>\n<h2 id=\"安装集成服务\"><a href=\"#安装集成服务\" class=\"headerlink\" title=\"安装集成服务\"></a>安装集成服务</h2><h3 id=\"RSS\"><a href=\"#RSS\" class=\"headerlink\" title=\"RSS\"></a>RSS</h3><pre><code class=\"bash\">npm install hexo-generator-feed --save\n</code></pre>\n<h3 id=\"search\"><a href=\"#search\" class=\"headerlink\" title=\"search\"></a>search</h3><pre><code class=\"bash\">npm isntall hexo-generator-search --save\n</code></pre>\n<h2 id=\"DIY\"><a href=\"#DIY\" class=\"headerlink\" title=\"DIY\"></a>DIY</h2><p>　　别急这只是刚刚开始,如果所有人都是这样的那怎么突出这个博客是专属我的呢,接下来让我们进行一些DIY.通过修改blog/themes/hexo-material文件夹下的_config.yml文件进行一下个性化的配置,注意不要跟blog下的_config.yml搞混了哦!可以参考<a href=\"https://material.vss.im/intro/\">主题配置</a>个性化你的博客.</p>\n<h1 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h1><p>　　博客弄好了,怎么可以不放到网上与大家分享呢,参考以下文档<a href=\"https://hexo.io/zh-cn/docs/deployment.html\">hexo部署</a>,将博客部署到<a href=\"https://github.com/\">github</a>,最后绑定好你的域名<a href=\"http://www.jianshu.com/p/1d427e888dda\">【Hexo+Github】域名和github绑定的问题</a>,一切大功告成了.<br>　　好了,享受写作的快乐吧!如果有什么问题欢迎留言或者点击侧边栏里的Q ME与我联系.</p>\n"},{"title":"Spring源码解析学习一","date":"2016-11-22T13:34:23.000Z","_content":"> 欲穷千里目，更上一层楼　　　王之涣--《登黄鹤楼》\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=443242&auto=1&height=66\"></iframe>\n\n# IOC容器\n\n　　[IOC](http://baike.baidu.com/link?url=JWeJwbeWUgHNVPBDar_dHnd4t0pkTjISMgwpwDTgT6IxvMCZ6Vnb_glBEyGJn5v2zShO1h092qk16D2zEq-xGSnhH72-awArnyJXo8YE7lVOwHZ8sOQgN9haMYHeVvIY),又名控制反转(Inversion of Control),即是某一接口具体实现类的选择控制权从调用类中移除，转交给第三方决定.因为IoC确实不够开门见山，因此业界曾进行了广泛的讨论，最终软件界的泰斗级人物Martin Fowler提出了DI（依赖注入：Dependency Injection）的概念用以代替IoC，即让调用类对某一接口实现类的依赖关系由第三方（容器或协作类）注入，以移除调用类对某一接口实现类的依赖。“依赖注入”这个名词显然比“控制反转”直接明了、易于理解。\nIOC则是容器是Spring实现IOC功能的具体执行者,在Spring中BeanFactory就是我们所说的IOC容器,从这个类名中可以看出它的设计采用了工厂模式,同时它是生产bean的,生产bean干什么呢?当然就是注入依赖了,BeanFactory这个借口主要为了一个最基本的IOC容器提供一个规范.\n```java\npublic interface BeanFactory {\n    /* 默认情况下，如果一个Bean是FactoryBean，Spring是会返回其生成的Bean，而不是工厂本身，如果想要得到工厂本身，需要在ID前加&.\n    * 例如:PropertiesFactoryBean,@Resource('properties')注入的是是Properties,而@Resource('properties')注入的才\n    * 是PropertiesFactoryBean\n    */\n    String FACTORY_BEAN_PREFIX = \"&\";\n    //通过bean的名称在IOC容器中获取bean对象\n    Object getBean(String s) throws BeansException;\n    //通过bean的名称和bean的Class类型来获取bean\n    <T> T getBean(String s, Class<T> aClass) throws BeansException;\n    //根据bean的Class类型来获取bean对象\n    <T> T getBean(Class<T> aClass) throws BeansException;\n    //根据名称和多个对象来获取一个bean对象\n    Object getBean(String s, Object... objects) throws BeansException;\n    //根据bean的Class类型和多个对象来获取一个bean\n    <T> T getBean(Class<T> aClass, Object... objects) throws BeansException;\n    //判断容器中是否包含名称是s的bean对象\n    boolean containsBean(String s);\n    //判断一个名称为s的bean对象是否为单例模式,如果容器中没有名称为s的Bean对象会抛出找不到该bean的异常\n    boolean isSingleton(String s) throws NoSuchBeanDefinitionException;\n    //判断一个名称为s的bean对象是否为多例模式,如果容器中没有名称为s的Bean对象会抛出找不到该bean的异常\n    boolean isPrototype(String s) throws NoSuchBeanDefinitionException;\n    //判断名称为s的bean的Class类型是不是指定的类型\n    boolean isTypeMatch(String s, ResolvableType resolvableType) throws NoSuchBeanDefinitionException;\n    //判断名称为s的bean的Class类型是不是指定的类型\n    boolean isTypeMatch(String s, Class<?> aClass) throws NoSuchBeanDefinitionException;\n    //获取名字为s的bean的Class类型\n    Class<?> getType(String s) throws NoSuchBeanDefinitionException;\n    //获取名称为s的bean的所有别名\n    String[] getAliases(String s);\n}\n```\nspring配置文件\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean name=\"A\" class=\"com.wang.meng.A\"/>\n    <alias name=\"A\" alias=\"a1\"/>\n    <alias name=\"A\" alias=\"a2\"/>\n    <bean name=\"B\" class=\"com.wang.meng.B\"/>\n    <alias name=\"B\" alias=\"b\"/>\n</beans>\n```\n简单的IOC容器创建并测试一些基本方法.\n创建过程:\n> * 创建IOC配置文件的抽象资源\n* 创建一个BeanFactory\n* 把读取配置信息的Reader配置给BeanFactory\n* 加载配置信息\n\n```java\n        ClassPathResource resource = new ClassPathResource(\"applicationContext.xml\");\n        DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n        XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);\n        reader.loadBeanDefinitions(resource);\n        System.out.println(\"名称为A的bean是否存在:\" + beanFactory.containsBean(\"A\"));\n        System.out.println(\"名称为B的bean是否存在:\" + beanFactory.containsBean(\"B\"));\n        System.out.println(\"名称为C的bean是否存在:\" + beanFactory.containsBean(\"C\"));\n        System.out.println(\"通过名称A:\" + beanFactory.getBean(\"A\"));\n        System.out.println(\"通过别名a1:\" + beanFactory.getBean(\"a1\"));\n        System.out.println(\"通过别名a2:\" + beanFactory.getBean(\"a2\"));\n        System.out.println(\"通过名称和类型:\" + beanFactory.getBean(\"A\", A.class));\n        System.out.println(\"通过名称和对象:\" + beanFactory.getBean(\"A\", beanFactory.getBean(\"a2\")));\n        System.out.println(\"A是否是单例模式:\"+beanFactory.isSingleton(\"A\"));\n        System.out.println(\"A是否是多例模式:\"+beanFactory.isPrototype(\"A\"));\n        System.out.println(\"名称为A的bean是否是A类型:\"+beanFactory.isTypeMatch(\"A\",A.class));\n        System.out.println(\"名称为A的bean是否是B类型\"+beanFactory.isTypeMatch(\"A\",B.class));\n        System.out.println(\"名称为A的bean的所有别名:\"+ Arrays.toString(beanFactory.getAliases(\"A\")));\n```\n打印结果\n```\n23:12:26.945 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key 'spring.liveBeansView.mbeanDomain' in any property source\n名称为A的bean是否存在:true\n名称为B的bean是否存在:true\n名称为C的bean是否存在:false\n通过名称A:com.wang.meng.A@569cfc36\n通过别名a1:com.wang.meng.A@569cfc36\n通过别名a2:com.wang.meng.A@569cfc36\n通过名称和类型:com.wang.meng.A@569cfc36\n通过名称和对象:com.wang.meng.A@569cfc36\nA是否是单例模式:true\nA是否是多例模式:false\n名称为A的bean是否是A类型:true\n名称为A的bean是否是B类型false\n名称为A的bean的所有别名:[a1, a2]\n```\n从结果中可以分析出,spring创建的bean默认为单例模式.\n","source":"_posts/Spring源码解析学习一.md","raw":"---\ntitle: Spring源码解析学习一\ndate: 2016-11-22 21:34:23\ntags: [spring,ioc]\ncategories: javaweb\n---\n> 欲穷千里目，更上一层楼　　　王之涣--《登黄鹤楼》\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=443242&auto=1&height=66\"></iframe>\n\n# IOC容器\n\n　　[IOC](http://baike.baidu.com/link?url=JWeJwbeWUgHNVPBDar_dHnd4t0pkTjISMgwpwDTgT6IxvMCZ6Vnb_glBEyGJn5v2zShO1h092qk16D2zEq-xGSnhH72-awArnyJXo8YE7lVOwHZ8sOQgN9haMYHeVvIY),又名控制反转(Inversion of Control),即是某一接口具体实现类的选择控制权从调用类中移除，转交给第三方决定.因为IoC确实不够开门见山，因此业界曾进行了广泛的讨论，最终软件界的泰斗级人物Martin Fowler提出了DI（依赖注入：Dependency Injection）的概念用以代替IoC，即让调用类对某一接口实现类的依赖关系由第三方（容器或协作类）注入，以移除调用类对某一接口实现类的依赖。“依赖注入”这个名词显然比“控制反转”直接明了、易于理解。\nIOC则是容器是Spring实现IOC功能的具体执行者,在Spring中BeanFactory就是我们所说的IOC容器,从这个类名中可以看出它的设计采用了工厂模式,同时它是生产bean的,生产bean干什么呢?当然就是注入依赖了,BeanFactory这个借口主要为了一个最基本的IOC容器提供一个规范.\n```java\npublic interface BeanFactory {\n    /* 默认情况下，如果一个Bean是FactoryBean，Spring是会返回其生成的Bean，而不是工厂本身，如果想要得到工厂本身，需要在ID前加&.\n    * 例如:PropertiesFactoryBean,@Resource('properties')注入的是是Properties,而@Resource('properties')注入的才\n    * 是PropertiesFactoryBean\n    */\n    String FACTORY_BEAN_PREFIX = \"&\";\n    //通过bean的名称在IOC容器中获取bean对象\n    Object getBean(String s) throws BeansException;\n    //通过bean的名称和bean的Class类型来获取bean\n    <T> T getBean(String s, Class<T> aClass) throws BeansException;\n    //根据bean的Class类型来获取bean对象\n    <T> T getBean(Class<T> aClass) throws BeansException;\n    //根据名称和多个对象来获取一个bean对象\n    Object getBean(String s, Object... objects) throws BeansException;\n    //根据bean的Class类型和多个对象来获取一个bean\n    <T> T getBean(Class<T> aClass, Object... objects) throws BeansException;\n    //判断容器中是否包含名称是s的bean对象\n    boolean containsBean(String s);\n    //判断一个名称为s的bean对象是否为单例模式,如果容器中没有名称为s的Bean对象会抛出找不到该bean的异常\n    boolean isSingleton(String s) throws NoSuchBeanDefinitionException;\n    //判断一个名称为s的bean对象是否为多例模式,如果容器中没有名称为s的Bean对象会抛出找不到该bean的异常\n    boolean isPrototype(String s) throws NoSuchBeanDefinitionException;\n    //判断名称为s的bean的Class类型是不是指定的类型\n    boolean isTypeMatch(String s, ResolvableType resolvableType) throws NoSuchBeanDefinitionException;\n    //判断名称为s的bean的Class类型是不是指定的类型\n    boolean isTypeMatch(String s, Class<?> aClass) throws NoSuchBeanDefinitionException;\n    //获取名字为s的bean的Class类型\n    Class<?> getType(String s) throws NoSuchBeanDefinitionException;\n    //获取名称为s的bean的所有别名\n    String[] getAliases(String s);\n}\n```\nspring配置文件\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean name=\"A\" class=\"com.wang.meng.A\"/>\n    <alias name=\"A\" alias=\"a1\"/>\n    <alias name=\"A\" alias=\"a2\"/>\n    <bean name=\"B\" class=\"com.wang.meng.B\"/>\n    <alias name=\"B\" alias=\"b\"/>\n</beans>\n```\n简单的IOC容器创建并测试一些基本方法.\n创建过程:\n> * 创建IOC配置文件的抽象资源\n* 创建一个BeanFactory\n* 把读取配置信息的Reader配置给BeanFactory\n* 加载配置信息\n\n```java\n        ClassPathResource resource = new ClassPathResource(\"applicationContext.xml\");\n        DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n        XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);\n        reader.loadBeanDefinitions(resource);\n        System.out.println(\"名称为A的bean是否存在:\" + beanFactory.containsBean(\"A\"));\n        System.out.println(\"名称为B的bean是否存在:\" + beanFactory.containsBean(\"B\"));\n        System.out.println(\"名称为C的bean是否存在:\" + beanFactory.containsBean(\"C\"));\n        System.out.println(\"通过名称A:\" + beanFactory.getBean(\"A\"));\n        System.out.println(\"通过别名a1:\" + beanFactory.getBean(\"a1\"));\n        System.out.println(\"通过别名a2:\" + beanFactory.getBean(\"a2\"));\n        System.out.println(\"通过名称和类型:\" + beanFactory.getBean(\"A\", A.class));\n        System.out.println(\"通过名称和对象:\" + beanFactory.getBean(\"A\", beanFactory.getBean(\"a2\")));\n        System.out.println(\"A是否是单例模式:\"+beanFactory.isSingleton(\"A\"));\n        System.out.println(\"A是否是多例模式:\"+beanFactory.isPrototype(\"A\"));\n        System.out.println(\"名称为A的bean是否是A类型:\"+beanFactory.isTypeMatch(\"A\",A.class));\n        System.out.println(\"名称为A的bean是否是B类型\"+beanFactory.isTypeMatch(\"A\",B.class));\n        System.out.println(\"名称为A的bean的所有别名:\"+ Arrays.toString(beanFactory.getAliases(\"A\")));\n```\n打印结果\n```\n23:12:26.945 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key 'spring.liveBeansView.mbeanDomain' in any property source\n名称为A的bean是否存在:true\n名称为B的bean是否存在:true\n名称为C的bean是否存在:false\n通过名称A:com.wang.meng.A@569cfc36\n通过别名a1:com.wang.meng.A@569cfc36\n通过别名a2:com.wang.meng.A@569cfc36\n通过名称和类型:com.wang.meng.A@569cfc36\n通过名称和对象:com.wang.meng.A@569cfc36\nA是否是单例模式:true\nA是否是多例模式:false\n名称为A的bean是否是A类型:true\n名称为A的bean是否是B类型false\n名称为A的bean的所有别名:[a1, a2]\n```\n从结果中可以分析出,spring创建的bean默认为单例模式.\n","slug":"Spring源码解析学习一","published":1,"updated":"2016-12-31T15:36:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1dph81k0006engtoiaegz6z","content":"<blockquote>\n<p>欲穷千里目，更上一层楼　　　王之涣–《登黄鹤楼》</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"http://music.163.com/outchain/player?type=2&id=443242&auto=1&height=66\"></iframe>\n\n<h1 id=\"IOC容器\"><a href=\"#IOC容器\" class=\"headerlink\" title=\"IOC容器\"></a>IOC容器</h1><p>　　<a href=\"http://baike.baidu.com/link?url=JWeJwbeWUgHNVPBDar_dHnd4t0pkTjISMgwpwDTgT6IxvMCZ6Vnb_glBEyGJn5v2zShO1h092qk16D2zEq-xGSnhH72-awArnyJXo8YE7lVOwHZ8sOQgN9haMYHeVvIY\" target=\"_blank\" rel=\"external\">IOC</a>,又名控制反转(Inversion of Control),即是某一接口具体实现类的选择控制权从调用类中移除，转交给第三方决定.因为IoC确实不够开门见山，因此业界曾进行了广泛的讨论，最终软件界的泰斗级人物Martin Fowler提出了DI（依赖注入：Dependency Injection）的概念用以代替IoC，即让调用类对某一接口实现类的依赖关系由第三方（容器或协作类）注入，以移除调用类对某一接口实现类的依赖。“依赖注入”这个名词显然比“控制反转”直接明了、易于理解。<br>IOC则是容器是Spring实现IOC功能的具体执行者,在Spring中BeanFactory就是我们所说的IOC容器,从这个类名中可以看出它的设计采用了工厂模式,同时它是生产bean的,生产bean干什么呢?当然就是注入依赖了,BeanFactory这个借口主要为了一个最基本的IOC容器提供一个规范.</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BeanFactory</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/* 默认情况下，如果一个Bean是FactoryBean，Spring是会返回其生成的Bean，而不是工厂本身，如果想要得到工厂本身，需要在ID前加&amp;.\n    * 例如:PropertiesFactoryBean,@Resource('properties')注入的是是Properties,而@Resource('properties')注入的才\n    * 是PropertiesFactoryBean\n    */</span>\n    String FACTORY_BEAN_PREFIX <span class=\"token operator\">=</span> <span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过bean的名称在IOC容器中获取bean对象</span>\n    Object <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> BeansException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过bean的名称和bean的Class类型来获取bean</span>\n    <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> T <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">,</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> aClass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> BeansException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//根据bean的Class类型来获取bean对象</span>\n    <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> T <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> aClass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> BeansException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//根据名称和多个对象来获取一个bean对象</span>\n    Object <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> objects<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> BeansException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//根据bean的Class类型和多个对象来获取一个bean</span>\n    <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> T <span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> aClass<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> objects<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> BeansException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//判断容器中是否包含名称是s的bean对象</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//判断一个名称为s的bean对象是否为单例模式,如果容器中没有名称为s的Bean对象会抛出找不到该bean的异常</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> NoSuchBeanDefinitionException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//判断一个名称为s的bean对象是否为多例模式,如果容器中没有名称为s的Bean对象会抛出找不到该bean的异常</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPrototype</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> NoSuchBeanDefinitionException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//判断名称为s的bean的Class类型是不是指定的类型</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">,</span> ResolvableType resolvableType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> NoSuchBeanDefinitionException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//判断名称为s的bean的Class类型是不是指定的类型</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">,</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> aClass<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> NoSuchBeanDefinitionException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//获取名字为s的bean的Class类型</span>\n    Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> NoSuchBeanDefinitionException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//获取名称为s的bean的所有别名</span>\n    String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>spring配置文件</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>A<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.wang.meng.A<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>alias</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>A<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>alias</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>A<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>B<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.wang.meng.B<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>alias</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>B<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>简单的IOC容器创建并测试一些基本方法.<br>创建过程:</p>\n<blockquote>\n<ul>\n<li>创建IOC配置文件的抽象资源</li>\n<li>创建一个BeanFactory</li>\n<li>把读取配置信息的Reader配置给BeanFactory</li>\n<li>加载配置信息</li>\n</ul>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\">        ClassPathResource resource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        DefaultListableBeanFactory beanFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultListableBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        XmlBeanDefinitionReader reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XmlBeanDefinitionReader</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token function\">loadBeanDefinitions</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"名称为A的bean是否存在:\"</span> <span class=\"token operator\">+</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"名称为B的bean是否存在:\"</span> <span class=\"token operator\">+</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"名称为C的bean是否存在:\"</span> <span class=\"token operator\">+</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">containsBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过名称A:\"</span> <span class=\"token operator\">+</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过别名a1:\"</span> <span class=\"token operator\">+</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过别名a2:\"</span> <span class=\"token operator\">+</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过名称和类型:\"</span> <span class=\"token operator\">+</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"通过名称和对象:\"</span> <span class=\"token operator\">+</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A是否是单例模式:\"</span><span class=\"token operator\">+</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isSingleton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A是否是多例模式:\"</span><span class=\"token operator\">+</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"名称为A的bean是否是A类型:\"</span><span class=\"token operator\">+</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span>A<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"名称为A的bean是否是B类型\"</span><span class=\"token operator\">+</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">isTypeMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"名称为A的bean的所有别名:\"</span><span class=\"token operator\">+</span> Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>打印结果</p>\n<pre><code>23:12:26.945 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key &#39;spring.liveBeansView.mbeanDomain&#39; in any property source\n名称为A的bean是否存在:true\n名称为B的bean是否存在:true\n名称为C的bean是否存在:false\n通过名称A:com.wang.meng.A@569cfc36\n通过别名a1:com.wang.meng.A@569cfc36\n通过别名a2:com.wang.meng.A@569cfc36\n通过名称和类型:com.wang.meng.A@569cfc36\n通过名称和对象:com.wang.meng.A@569cfc36\nA是否是单例模式:true\nA是否是多例模式:false\n名称为A的bean是否是A类型:true\n名称为A的bean是否是B类型false\n名称为A的bean的所有别名:[a1, a2]\n</code></pre><p>从结果中可以分析出,spring创建的bean默认为单例模式.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>欲穷千里目，更上一层楼　　　王之涣–《登黄鹤楼》</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"http://music.163.com/outchain/player?type=2&id=443242&auto=1&height=66\"></iframe>\n\n<h1 id=\"IOC容器\"><a href=\"#IOC容器\" class=\"headerlink\" title=\"IOC容器\"></a>IOC容器</h1><p>　　<a href=\"http://baike.baidu.com/link?url=JWeJwbeWUgHNVPBDar_dHnd4t0pkTjISMgwpwDTgT6IxvMCZ6Vnb_glBEyGJn5v2zShO1h092qk16D2zEq-xGSnhH72-awArnyJXo8YE7lVOwHZ8sOQgN9haMYHeVvIY\">IOC</a>,又名控制反转(Inversion of Control),即是某一接口具体实现类的选择控制权从调用类中移除，转交给第三方决定.因为IoC确实不够开门见山，因此业界曾进行了广泛的讨论，最终软件界的泰斗级人物Martin Fowler提出了DI（依赖注入：Dependency Injection）的概念用以代替IoC，即让调用类对某一接口实现类的依赖关系由第三方（容器或协作类）注入，以移除调用类对某一接口实现类的依赖。“依赖注入”这个名词显然比“控制反转”直接明了、易于理解。<br>IOC则是容器是Spring实现IOC功能的具体执行者,在Spring中BeanFactory就是我们所说的IOC容器,从这个类名中可以看出它的设计采用了工厂模式,同时它是生产bean的,生产bean干什么呢?当然就是注入依赖了,BeanFactory这个借口主要为了一个最基本的IOC容器提供一个规范.</p>\n<pre><code class=\"java\">public interface BeanFactory {\n    /* 默认情况下，如果一个Bean是FactoryBean，Spring是会返回其生成的Bean，而不是工厂本身，如果想要得到工厂本身，需要在ID前加&amp;.\n    * 例如:PropertiesFactoryBean,@Resource(&#39;properties&#39;)注入的是是Properties,而@Resource(&#39;properties&#39;)注入的才\n    * 是PropertiesFactoryBean\n    */\n    String FACTORY_BEAN_PREFIX = &quot;&amp;&quot;;\n    //通过bean的名称在IOC容器中获取bean对象\n    Object getBean(String s) throws BeansException;\n    //通过bean的名称和bean的Class类型来获取bean\n    &lt;T&gt; T getBean(String s, Class&lt;T&gt; aClass) throws BeansException;\n    //根据bean的Class类型来获取bean对象\n    &lt;T&gt; T getBean(Class&lt;T&gt; aClass) throws BeansException;\n    //根据名称和多个对象来获取一个bean对象\n    Object getBean(String s, Object... objects) throws BeansException;\n    //根据bean的Class类型和多个对象来获取一个bean\n    &lt;T&gt; T getBean(Class&lt;T&gt; aClass, Object... objects) throws BeansException;\n    //判断容器中是否包含名称是s的bean对象\n    boolean containsBean(String s);\n    //判断一个名称为s的bean对象是否为单例模式,如果容器中没有名称为s的Bean对象会抛出找不到该bean的异常\n    boolean isSingleton(String s) throws NoSuchBeanDefinitionException;\n    //判断一个名称为s的bean对象是否为多例模式,如果容器中没有名称为s的Bean对象会抛出找不到该bean的异常\n    boolean isPrototype(String s) throws NoSuchBeanDefinitionException;\n    //判断名称为s的bean的Class类型是不是指定的类型\n    boolean isTypeMatch(String s, ResolvableType resolvableType) throws NoSuchBeanDefinitionException;\n    //判断名称为s的bean的Class类型是不是指定的类型\n    boolean isTypeMatch(String s, Class&lt;?&gt; aClass) throws NoSuchBeanDefinitionException;\n    //获取名字为s的bean的Class类型\n    Class&lt;?&gt; getType(String s) throws NoSuchBeanDefinitionException;\n    //获取名称为s的bean的所有别名\n    String[] getAliases(String s);\n}\n</code></pre>\n<p>spring配置文件</p>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;\n\n    &lt;bean name=&quot;A&quot; class=&quot;com.wang.meng.A&quot;/&gt;\n    &lt;alias name=&quot;A&quot; alias=&quot;a1&quot;/&gt;\n    &lt;alias name=&quot;A&quot; alias=&quot;a2&quot;/&gt;\n    &lt;bean name=&quot;B&quot; class=&quot;com.wang.meng.B&quot;/&gt;\n    &lt;alias name=&quot;B&quot; alias=&quot;b&quot;/&gt;\n&lt;/beans&gt;\n</code></pre>\n<p>简单的IOC容器创建并测试一些基本方法.<br>创建过程:</p>\n<blockquote>\n<ul>\n<li>创建IOC配置文件的抽象资源</li>\n<li>创建一个BeanFactory</li>\n<li>把读取配置信息的Reader配置给BeanFactory</li>\n<li>加载配置信息</li>\n</ul>\n</blockquote>\n<pre><code class=\"java\">        ClassPathResource resource = new ClassPathResource(&quot;applicationContext.xml&quot;);\n        DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();\n        XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory);\n        reader.loadBeanDefinitions(resource);\n        System.out.println(&quot;名称为A的bean是否存在:&quot; + beanFactory.containsBean(&quot;A&quot;));\n        System.out.println(&quot;名称为B的bean是否存在:&quot; + beanFactory.containsBean(&quot;B&quot;));\n        System.out.println(&quot;名称为C的bean是否存在:&quot; + beanFactory.containsBean(&quot;C&quot;));\n        System.out.println(&quot;通过名称A:&quot; + beanFactory.getBean(&quot;A&quot;));\n        System.out.println(&quot;通过别名a1:&quot; + beanFactory.getBean(&quot;a1&quot;));\n        System.out.println(&quot;通过别名a2:&quot; + beanFactory.getBean(&quot;a2&quot;));\n        System.out.println(&quot;通过名称和类型:&quot; + beanFactory.getBean(&quot;A&quot;, A.class));\n        System.out.println(&quot;通过名称和对象:&quot; + beanFactory.getBean(&quot;A&quot;, beanFactory.getBean(&quot;a2&quot;)));\n        System.out.println(&quot;A是否是单例模式:&quot;+beanFactory.isSingleton(&quot;A&quot;));\n        System.out.println(&quot;A是否是多例模式:&quot;+beanFactory.isPrototype(&quot;A&quot;));\n        System.out.println(&quot;名称为A的bean是否是A类型:&quot;+beanFactory.isTypeMatch(&quot;A&quot;,A.class));\n        System.out.println(&quot;名称为A的bean是否是B类型&quot;+beanFactory.isTypeMatch(&quot;A&quot;,B.class));\n        System.out.println(&quot;名称为A的bean的所有别名:&quot;+ Arrays.toString(beanFactory.getAliases(&quot;A&quot;)));\n</code></pre>\n<p>打印结果</p>\n<pre><code>23:12:26.945 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key &#39;spring.liveBeansView.mbeanDomain&#39; in any property source\n名称为A的bean是否存在:true\n名称为B的bean是否存在:true\n名称为C的bean是否存在:false\n通过名称A:com.wang.meng.A@569cfc36\n通过别名a1:com.wang.meng.A@569cfc36\n通过别名a2:com.wang.meng.A@569cfc36\n通过名称和类型:com.wang.meng.A@569cfc36\n通过名称和对象:com.wang.meng.A@569cfc36\nA是否是单例模式:true\nA是否是多例模式:false\n名称为A的bean是否是A类型:true\n名称为A的bean是否是B类型false\n名称为A的bean的所有别名:[a1, a2]\n</code></pre><p>从结果中可以分析出,spring创建的bean默认为单例模式.</p>\n"},{"title":"profile:spring根据环境动态配置","date":"2016-12-13T13:20:13.000Z","_content":"> 好好学习,天天向上　　　--英语老师说的\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=86369&auto=1&height=66\"></iframe>\n# Profile\n\n    在不同的开发环境下,可能会出现有的bean在不同的环境下配置不同,如果通过修改配置文件或者代码来做到切换,那势必将增加工作难度和实施的压力.\n在spring3.1以后引入了profile bean的功能,可以将不同环境下的bean一次定义,然后通过切换对应的profile的激活状态来实现不同环境下bean的动态配置.\n## 测试\n通过改变不同环境下输出流指向不同的位置测试是否实现了动态切换\n\n> dev环境下,输出流会指向一个文件,将内容打印在文本文件内.\npro环境下,输出流会指向控制台,将内容打印控制台上.\n\n### java配置方式\n```java\n@Configuration\npublic class JavaConfig {\n\n    @Bean\n    public Knight knight() {\n        return new DamselRescuingKnight();\n    }\n\n    @Bean\n    @Profile(\"dev\")\n    public Quest devQuest() {\n        PrintStream printStream = null;\n        try {\n            printStream = new PrintStream(\"/Volumes/my space/开发相关/work space/wm/src/main/resources/a.txt\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return new QuestImpl(printStream);\n    }\n\n    @Bean\n    @Profile(\"pro\")\n    public Quest proQuest() {\n        return new QuestImpl(System.out);\n    }\n}\n```\n### 测试代码\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = JavaConfig.class)\n@ActiveProfiles(\"dev\")\npublic class JavaConfigTest {\n    @Resource\n    private Knight knight;\n    @Test\n    public void contextLoads() {\n        knight.fight();\n    }\n    @Test\n    public void knightNotNull(){\n        Assert.assertNotNull(knight);\n    }\n}\n```\n\n### xml配置方式\n```xml\n<bean name=\"knight\" class=\"com.wang.meng.DamselRescuingKnight\">\n</bean>\n<beans profile=\"pro\">\n    <bean name=\"devQuestImpl\" class=\"com.wang.meng.QuestImpl\">\n        <constructor-arg name=\"_printStream\" value=\"#{T(System).out}\"/>\n    </bean>\n</beans>\n<beans profile=\"dev\">\n    <bean name=\"printSteam\" class=\"java.io.PrintStream\">\n        <constructor-arg value=\"/Volumes/my space/开发相关/work space/wm/src/main/resources/a.txt\"/>\n    </bean>\n    <bean name=\"proQuestImpl\" class=\"com.wang.meng.QuestImpl\">\n        <constructor-arg name=\"_printStream\" ref=\"printSteam\"/>\n    </bean>\n</beans>\n<beans>\n<bean name=\"minstrel\" class=\"com.wang.meng.Minstrel\">\n    <constructor-arg name=\"_printStream\" value=\"#{T(System).out}\"/>\n</bean>\n<aop:config>\n    <aop:aspect ref=\"minstrel\">\n        <aop:pointcut id=\"fight\" expression=\"execution(* *.fight(..))\"/>\n        <aop:before method=\"before\" pointcut-ref=\"fight\"/>\n        <aop:after method=\"after\" pointcut-ref=\"fight\"/>\n    </aop:aspect>\n</aop:config>\n</beans>\n```\n### 测试代码\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = \"classpath:applicationContext.xml\")\n@ActiveProfiles(\"pro\")\npublic class XmlConfigTests {\n\t@Resource\n\tprivate Knight knight;\n\t@Test\n\tpublic void contextLoads() {\n\t\tknight.fight();\n\t}\n}\n```\n> xml配置方式启动报错\n```java\nCaused by: org.xml.sax.SAXParseException; lineNumber: 22; columnNumber: 58; cvc-complex-type.2.4.a: 发现了以元素 'bean' 开头的无效内容。应以 '{\"http://www.springframework.org/schema/beans\":beans}' 之一开头。\n```\n经排查,如果前边使用了<beans profile=\"dev\">配置了以后,那么后边如果存在不需要动态配置的<bean>,必须用<beans></beans>包裹起来,否侧会报错\n","source":"_posts/profile-spring根据环境动态配置.md","raw":"---\ntitle: 'profile:spring根据环境动态配置'\ndate: 2016-12-13 21:20:13\ntags: [spring,profile]\ncategories: 博客\n---\n> 好好学习,天天向上　　　--英语老师说的\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=86369&auto=1&height=66\"></iframe>\n# Profile\n\n    在不同的开发环境下,可能会出现有的bean在不同的环境下配置不同,如果通过修改配置文件或者代码来做到切换,那势必将增加工作难度和实施的压力.\n在spring3.1以后引入了profile bean的功能,可以将不同环境下的bean一次定义,然后通过切换对应的profile的激活状态来实现不同环境下bean的动态配置.\n## 测试\n通过改变不同环境下输出流指向不同的位置测试是否实现了动态切换\n\n> dev环境下,输出流会指向一个文件,将内容打印在文本文件内.\npro环境下,输出流会指向控制台,将内容打印控制台上.\n\n### java配置方式\n```java\n@Configuration\npublic class JavaConfig {\n\n    @Bean\n    public Knight knight() {\n        return new DamselRescuingKnight();\n    }\n\n    @Bean\n    @Profile(\"dev\")\n    public Quest devQuest() {\n        PrintStream printStream = null;\n        try {\n            printStream = new PrintStream(\"/Volumes/my space/开发相关/work space/wm/src/main/resources/a.txt\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return new QuestImpl(printStream);\n    }\n\n    @Bean\n    @Profile(\"pro\")\n    public Quest proQuest() {\n        return new QuestImpl(System.out);\n    }\n}\n```\n### 测试代码\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = JavaConfig.class)\n@ActiveProfiles(\"dev\")\npublic class JavaConfigTest {\n    @Resource\n    private Knight knight;\n    @Test\n    public void contextLoads() {\n        knight.fight();\n    }\n    @Test\n    public void knightNotNull(){\n        Assert.assertNotNull(knight);\n    }\n}\n```\n\n### xml配置方式\n```xml\n<bean name=\"knight\" class=\"com.wang.meng.DamselRescuingKnight\">\n</bean>\n<beans profile=\"pro\">\n    <bean name=\"devQuestImpl\" class=\"com.wang.meng.QuestImpl\">\n        <constructor-arg name=\"_printStream\" value=\"#{T(System).out}\"/>\n    </bean>\n</beans>\n<beans profile=\"dev\">\n    <bean name=\"printSteam\" class=\"java.io.PrintStream\">\n        <constructor-arg value=\"/Volumes/my space/开发相关/work space/wm/src/main/resources/a.txt\"/>\n    </bean>\n    <bean name=\"proQuestImpl\" class=\"com.wang.meng.QuestImpl\">\n        <constructor-arg name=\"_printStream\" ref=\"printSteam\"/>\n    </bean>\n</beans>\n<beans>\n<bean name=\"minstrel\" class=\"com.wang.meng.Minstrel\">\n    <constructor-arg name=\"_printStream\" value=\"#{T(System).out}\"/>\n</bean>\n<aop:config>\n    <aop:aspect ref=\"minstrel\">\n        <aop:pointcut id=\"fight\" expression=\"execution(* *.fight(..))\"/>\n        <aop:before method=\"before\" pointcut-ref=\"fight\"/>\n        <aop:after method=\"after\" pointcut-ref=\"fight\"/>\n    </aop:aspect>\n</aop:config>\n</beans>\n```\n### 测试代码\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = \"classpath:applicationContext.xml\")\n@ActiveProfiles(\"pro\")\npublic class XmlConfigTests {\n\t@Resource\n\tprivate Knight knight;\n\t@Test\n\tpublic void contextLoads() {\n\t\tknight.fight();\n\t}\n}\n```\n> xml配置方式启动报错\n```java\nCaused by: org.xml.sax.SAXParseException; lineNumber: 22; columnNumber: 58; cvc-complex-type.2.4.a: 发现了以元素 'bean' 开头的无效内容。应以 '{\"http://www.springframework.org/schema/beans\":beans}' 之一开头。\n```\n经排查,如果前边使用了<beans profile=\"dev\">配置了以后,那么后边如果存在不需要动态配置的<bean>,必须用<beans></beans>包裹起来,否侧会报错\n","slug":"profile-spring根据环境动态配置","published":1,"updated":"2016-12-31T15:36:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1dph81m0007engtfb3053to","content":"<blockquote>\n<p>好好学习,天天向上　　　–英语老师说的</p>\n</blockquote>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=86369&auto=1&height=66\"></iframe></p>\n<h1 id=\"Profile\"><a href=\"#Profile\" class=\"headerlink\" title=\"Profile\"></a>Profile</h1><pre><code>在不同的开发环境下,可能会出现有的bean在不同的环境下配置不同,如果通过修改配置文件或者代码来做到切换,那势必将增加工作难度和实施的压力.\n</code></pre><p>在spring3.1以后引入了profile bean的功能,可以将不同环境下的bean一次定义,然后通过切换对应的profile的激活状态来实现不同环境下bean的动态配置.</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>通过改变不同环境下输出流指向不同的位置测试是否实现了动态切换</p>\n<blockquote>\n<p>dev环境下,输出流会指向一个文件,将内容打印在文本文件内.<br>pro环境下,输出流会指向控制台,将内容打印控制台上.</p>\n</blockquote>\n<h3 id=\"java配置方式\"><a href=\"#java配置方式\" class=\"headerlink\" title=\"java配置方式\"></a>java配置方式</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JavaConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> Knight <span class=\"token function\">knight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DamselRescuingKnight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> Quest <span class=\"token function\">devQuest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        PrintStream printStream <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            printStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Volumes/my space/开发相关/work space/wm/src/main/resources/a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QuestImpl</span><span class=\"token punctuation\">(</span>printStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pro\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> Quest <span class=\"token function\">proQuest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QuestImpl</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span>SpringJUnit4ClassRunner<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> JavaConfig<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JavaConfigTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> Knight knight<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        knight<span class=\"token punctuation\">.</span><span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">knightNotNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">assertNotNull</span><span class=\"token punctuation\">(</span>knight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"xml配置方式\"><a href=\"#xml配置方式\" class=\"headerlink\" title=\"xml配置方式\"></a>xml配置方式</h3><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>knight<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.wang.meng.DamselRescuingKnight<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">profile</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>pro<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>devQuestImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.wang.meng.QuestImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>_printStream<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#{T(System).out}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">profile</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dev<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>printSteam<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>java.io.PrintStream<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/Volumes/my space/开发相关/work space/wm/src/main/resources/a.txt<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>proQuestImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.wang.meng.QuestImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>_printStream<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>printSteam<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>minstrel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.wang.meng.Minstrel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>_printStream<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#{T(System).out}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>aspect</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>minstrel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>pointcut</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fight<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">expression</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>execution(* *.fight(..))<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>before</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>before<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fight<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>after</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>after<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fight<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>aspect</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"测试代码-1\"><a href=\"#测试代码-1\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span>SpringJUnit4ClassRunner<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>locations <span class=\"token operator\">=</span> <span class=\"token string\">\"classpath:applicationContext.xml\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@ActiveProfiles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pro\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XmlConfigTests</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> Knight knight<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        knight<span class=\"token punctuation\">.</span><span class=\"token function\">fight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>xml配置方式启动报错</p>\n<pre class=\" language-java\"><code class=\"language-java\">Caused by<span class=\"token operator\">:</span> org<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>sax<span class=\"token punctuation\">.</span>SAXParseException<span class=\"token punctuation\">;</span> lineNumber<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span> columnNumber<span class=\"token operator\">:</span> <span class=\"token number\">58</span><span class=\"token punctuation\">;</span> cvc<span class=\"token operator\">-</span>complex<span class=\"token operator\">-</span>type<span class=\"token number\">.2</span><span class=\"token punctuation\">.</span><span class=\"token number\">4</span><span class=\"token punctuation\">.</span>a<span class=\"token operator\">:</span> 发现了以元素 <span class=\"token string\">'bean'</span> 开头的无效内容。应以 <span class=\"token string\">'{\"http://www.springframework.org/schema/beans\":beans}'</span> 之一开头。\n</code></pre>\n<p>经排查,如果前边使用了<beans profile=\"dev\">配置了以后,那么后边如果存在不需要动态配置的<bean>,必须用<beans></beans>包裹起来,否侧会报错</bean></beans></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>好好学习,天天向上　　　–英语老师说的</p>\n</blockquote>\n<p><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=86369&auto=1&height=66\"></iframe></p>\n<h1 id=\"Profile\"><a href=\"#Profile\" class=\"headerlink\" title=\"Profile\"></a>Profile</h1><pre><code>在不同的开发环境下,可能会出现有的bean在不同的环境下配置不同,如果通过修改配置文件或者代码来做到切换,那势必将增加工作难度和实施的压力.\n</code></pre><p>在spring3.1以后引入了profile bean的功能,可以将不同环境下的bean一次定义,然后通过切换对应的profile的激活状态来实现不同环境下bean的动态配置.</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>通过改变不同环境下输出流指向不同的位置测试是否实现了动态切换</p>\n<blockquote>\n<p>dev环境下,输出流会指向一个文件,将内容打印在文本文件内.<br>pro环境下,输出流会指向控制台,将内容打印控制台上.</p>\n</blockquote>\n<h3 id=\"java配置方式\"><a href=\"#java配置方式\" class=\"headerlink\" title=\"java配置方式\"></a>java配置方式</h3><pre><code class=\"java\">@Configuration\npublic class JavaConfig {\n\n    @Bean\n    public Knight knight() {\n        return new DamselRescuingKnight();\n    }\n\n    @Bean\n    @Profile(&quot;dev&quot;)\n    public Quest devQuest() {\n        PrintStream printStream = null;\n        try {\n            printStream = new PrintStream(&quot;/Volumes/my space/开发相关/work space/wm/src/main/resources/a.txt&quot;);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return new QuestImpl(printStream);\n    }\n\n    @Bean\n    @Profile(&quot;pro&quot;)\n    public Quest proQuest() {\n        return new QuestImpl(System.out);\n    }\n}\n</code></pre>\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><pre><code class=\"java\">@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = JavaConfig.class)\n@ActiveProfiles(&quot;dev&quot;)\npublic class JavaConfigTest {\n    @Resource\n    private Knight knight;\n    @Test\n    public void contextLoads() {\n        knight.fight();\n    }\n    @Test\n    public void knightNotNull(){\n        Assert.assertNotNull(knight);\n    }\n}\n</code></pre>\n<h3 id=\"xml配置方式\"><a href=\"#xml配置方式\" class=\"headerlink\" title=\"xml配置方式\"></a>xml配置方式</h3><pre><code class=\"xml\">&lt;bean name=&quot;knight&quot; class=&quot;com.wang.meng.DamselRescuingKnight&quot;&gt;\n&lt;/bean&gt;\n&lt;beans profile=&quot;pro&quot;&gt;\n    &lt;bean name=&quot;devQuestImpl&quot; class=&quot;com.wang.meng.QuestImpl&quot;&gt;\n        &lt;constructor-arg name=&quot;_printStream&quot; value=&quot;#{T(System).out}&quot;/&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;\n&lt;beans profile=&quot;dev&quot;&gt;\n    &lt;bean name=&quot;printSteam&quot; class=&quot;java.io.PrintStream&quot;&gt;\n        &lt;constructor-arg value=&quot;/Volumes/my space/开发相关/work space/wm/src/main/resources/a.txt&quot;/&gt;\n    &lt;/bean&gt;\n    &lt;bean name=&quot;proQuestImpl&quot; class=&quot;com.wang.meng.QuestImpl&quot;&gt;\n        &lt;constructor-arg name=&quot;_printStream&quot; ref=&quot;printSteam&quot;/&gt;\n    &lt;/bean&gt;\n&lt;/beans&gt;\n&lt;beans&gt;\n&lt;bean name=&quot;minstrel&quot; class=&quot;com.wang.meng.Minstrel&quot;&gt;\n    &lt;constructor-arg name=&quot;_printStream&quot; value=&quot;#{T(System).out}&quot;/&gt;\n&lt;/bean&gt;\n&lt;aop:config&gt;\n    &lt;aop:aspect ref=&quot;minstrel&quot;&gt;\n        &lt;aop:pointcut id=&quot;fight&quot; expression=&quot;execution(* *.fight(..))&quot;/&gt;\n        &lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;fight&quot;/&gt;\n        &lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;fight&quot;/&gt;\n    &lt;/aop:aspect&gt;\n&lt;/aop:config&gt;\n&lt;/beans&gt;\n</code></pre>\n<h3 id=\"测试代码-1\"><a href=\"#测试代码-1\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><pre><code class=\"java\">@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = &quot;classpath:applicationContext.xml&quot;)\n@ActiveProfiles(&quot;pro&quot;)\npublic class XmlConfigTests {\n    @Resource\n    private Knight knight;\n    @Test\n    public void contextLoads() {\n        knight.fight();\n    }\n}\n</code></pre>\n<blockquote>\n<p>xml配置方式启动报错</p>\n<pre><code class=\"java\">Caused by: org.xml.sax.SAXParseException; lineNumber: 22; columnNumber: 58; cvc-complex-type.2.4.a: 发现了以元素 &#39;bean&#39; 开头的无效内容。应以 &#39;{&quot;http://www.springframework.org/schema/beans&quot;:beans}&#39; 之一开头。\n</code></pre>\n<p>经排查,如果前边使用了<beans profile=\"dev\">配置了以后,那么后边如果存在不需要动态配置的<bean>,必须用<beans></beans>包裹起来,否侧会报错</p>\n</blockquote>\n"},{"title":"java基础拾遗","date":"2017-03-21T11:49:18.000Z","_content":"> 天青色等烟雨,而我在等你　　--方文山《青花瓷》\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=29027238&auto=1&height=66\"></iframe>\n\n# 题记\n最近准备梳理一下java基础知识,搞清楚自己到底会哪些,以及有哪些不足,供以后的学习提供一个方向.\n\n## 正在进行的模块:\n* jvm相关\n* 集合框架\n## 准备进行的模块:\n* 多线程\n* 设计模式\n* 等..\n\n## 脑图如下(待完成):\n{% pdf /pdf/web开发.pdf %}\n\n","source":"_posts/java基础拾遗.md","raw":"---\ntitle: java基础拾遗\ndate: 2017-03-21 19:49:18\ntags: [java,jvm,脑图]\ncategories: java基础\n---\n> 天青色等烟雨,而我在等你　　--方文山《青花瓷》\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=29027238&auto=1&height=66\"></iframe>\n\n# 题记\n最近准备梳理一下java基础知识,搞清楚自己到底会哪些,以及有哪些不足,供以后的学习提供一个方向.\n\n## 正在进行的模块:\n* jvm相关\n* 集合框架\n## 准备进行的模块:\n* 多线程\n* 设计模式\n* 等..\n\n## 脑图如下(待完成):\n{% pdf /pdf/web开发.pdf %}\n\n","slug":"java基础拾遗","published":1,"updated":"2017-03-21T12:17:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1dph81r0008engtha9s7c88","content":"<blockquote>\n<p>天青色等烟雨,而我在等你　　–方文山《青花瓷》</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=29027238&auto=1&height=66\"></iframe>\n\n<h1 id=\"题记\"><a href=\"#题记\" class=\"headerlink\" title=\"题记\"></a>题记</h1><p>最近准备梳理一下java基础知识,搞清楚自己到底会哪些,以及有哪些不足,供以后的学习提供一个方向.</p>\n<h2 id=\"正在进行的模块\"><a href=\"#正在进行的模块\" class=\"headerlink\" title=\"正在进行的模块:\"></a>正在进行的模块:</h2><ul>\n<li>jvm相关</li>\n<li>集合框架<h2 id=\"准备进行的模块\"><a href=\"#准备进行的模块\" class=\"headerlink\" title=\"准备进行的模块:\"></a>准备进行的模块:</h2></li>\n<li>多线程</li>\n<li>设计模式</li>\n<li>等..</li>\n</ul>\n<h2 id=\"脑图如下-待完成\"><a href=\"#脑图如下-待完成\" class=\"headerlink\" title=\"脑图如下(待完成):\"></a>脑图如下(待完成):</h2>\n\n\t<div class=\"row\">\n    <embed src=\"/pdf/web开发.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>天青色等烟雨,而我在等你　　–方文山《青花瓷》</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=29027238&auto=1&height=66\"></iframe>\n\n<h1 id=\"题记\"><a href=\"#题记\" class=\"headerlink\" title=\"题记\"></a>题记</h1><p>最近准备梳理一下java基础知识,搞清楚自己到底会哪些,以及有哪些不足,供以后的学习提供一个方向.</p>\n<h2 id=\"正在进行的模块\"><a href=\"#正在进行的模块\" class=\"headerlink\" title=\"正在进行的模块:\"></a>正在进行的模块:</h2><ul>\n<li>jvm相关</li>\n<li>集合框架<h2 id=\"准备进行的模块\"><a href=\"#准备进行的模块\" class=\"headerlink\" title=\"准备进行的模块:\"></a>准备进行的模块:</h2></li>\n<li>多线程</li>\n<li>设计模式</li>\n<li>等..</li>\n</ul>\n<h2 id=\"脑图如下-待完成\"><a href=\"#脑图如下-待完成\" class=\"headerlink\" title=\"脑图如下(待完成):\"></a>脑图如下(待完成):</h2>\n\n\t<div class=\"row\">\n    <embed src=\"/pdf/web开发.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n"},{"title":"再见,2016!","date":"2016-12-31T13:50:47.000Z","_content":"> 致2016的我!　　　--沃兹基.索德《2016.12.31 22:51:50》\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26524326&auto=1&height=66\"></iframe>\n\n# 回首\n　　眼看着2016年又要过完了，有时候仿佛觉得08年北京奥运会还历历在目，一转眼，2016年都结束了，由不得我感慨一句：“时间都去哪了”！明儿就是元旦了，2017马上就要来了。本来想把今天当成普普通通的一天，过去也就过去了，但是思来想去还是做个总结吧，也许不能让我对未来的目标更明确，但起码能让我对过往有一个清晰的认识。\n## 工作:\n>　　先说说工作吧,大学毕业至今四年不足三年有余，进过车间当检修工，下过工地当施工员，也在家里的饭店打过杂，期间还搁担保公司打过骚扰电话(电话销售)，说实话作为一名电子专业的毕业生，从来没务过正业，感觉也是挺惭愧的。换过这么多行业，最长的待了八个月，最短的仅仅持续了一个月，最后因为听了乔丹的一句话：“Just Do IT！”，稀里糊涂的混进了IT圈。至今工作一年有余，算是工作过最长的行业了，且暂时也没有换行的打算。一直希望自己在这个行业能有所建树，希望到了五十岁，我依然可以敲着键盘听着歌,做一名coder。然而由于天生的惰性吧，虽然心里迫切的想学东西，但是总是在有时间学习的时候，发现手机原来这么好玩，电脑原来好玩，然后就没有然后了。。。。所以时至今日，技术依然是菜的抠脚。以后一定要吸取教训，努力提高自己的技术和能力。\n\n## 生活:\n>　　接着说说生活。作为一名单身狗（其实也不能说是单身狗，因为没有狗能活到26岁），我暂时还不用面临家庭的负担。而且，虽然在外打工，但是全家都在这边，生活上也方便了许多。然而事物都具有两面性，有些小伙伴羡慕我跟父母生活在一起，有人做饭，不用思念想家人。可是你们有没有想过，同是单身狗的你们，一年只有半个月需要面对家里人的压力，而我每天都需要。。。\n　　看着朋友和同学一个个组建起自己的家庭，有一个可爱的宝宝，说不羡慕那是假话。对爱情，也渴望过，也幻想过，但往往被现实给一盆冷水泼醒了。不敢面对生活的压力，害怕自己没有能力承担起一个家庭的责任，迷茫，失落。\n\n## 人际\n>　　最后说说人际.虽然在工作中可能给别人的印象是挺热闹的,其实骨子里还是一个孤独症患者吧.下班后的社交基本为零,除了偶尔跟胡子和包子有点联系,貌似其他的同学和朋友基本没什么往来了,可能大家也快把我遗忘了.而我也只有通过朋友圈和空间的点赞偶尔刷一下存在感了.\n\n# 展望\n* 希望在新的一年里,技术上有所提高,能够跟上互联网快速发展的脚步;\n* 希望在新的一年里,能解决个人问题(`ps:估计希望不大~_~!!`);\n* 希望在新的一年里,朋友圈里看到的都是大家幸福的生活;\n* 希望在新的一年里,世界和平`^_^`!\n\n# 总结\n　　写之前内心感慨很多,感觉自己有很多东西渴望表达,以为自己能写下很多东西,可是当码字的时候却发现不知道该写些什么,不知道该如何表达,那就这样吧.\n\n　　欢迎朋友们在下面的评论区留下你的新年寄语!\n\n　　那么,再见,2016!你好,2017!\n\n---\n　　![](http://ogw774xrt.bkt.clouddn.com/861-1611050U502.png)\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　\n","source":"_posts/再见,2016!.md","raw":"---\ntitle: 再见,2016!\ndate: 2016-12-31 21:50:47\ntags: [年终总结,2016]\ncategories:  个人总结\n---\n> 致2016的我!　　　--沃兹基.索德《2016.12.31 22:51:50》\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26524326&auto=1&height=66\"></iframe>\n\n# 回首\n　　眼看着2016年又要过完了，有时候仿佛觉得08年北京奥运会还历历在目，一转眼，2016年都结束了，由不得我感慨一句：“时间都去哪了”！明儿就是元旦了，2017马上就要来了。本来想把今天当成普普通通的一天，过去也就过去了，但是思来想去还是做个总结吧，也许不能让我对未来的目标更明确，但起码能让我对过往有一个清晰的认识。\n## 工作:\n>　　先说说工作吧,大学毕业至今四年不足三年有余，进过车间当检修工，下过工地当施工员，也在家里的饭店打过杂，期间还搁担保公司打过骚扰电话(电话销售)，说实话作为一名电子专业的毕业生，从来没务过正业，感觉也是挺惭愧的。换过这么多行业，最长的待了八个月，最短的仅仅持续了一个月，最后因为听了乔丹的一句话：“Just Do IT！”，稀里糊涂的混进了IT圈。至今工作一年有余，算是工作过最长的行业了，且暂时也没有换行的打算。一直希望自己在这个行业能有所建树，希望到了五十岁，我依然可以敲着键盘听着歌,做一名coder。然而由于天生的惰性吧，虽然心里迫切的想学东西，但是总是在有时间学习的时候，发现手机原来这么好玩，电脑原来好玩，然后就没有然后了。。。。所以时至今日，技术依然是菜的抠脚。以后一定要吸取教训，努力提高自己的技术和能力。\n\n## 生活:\n>　　接着说说生活。作为一名单身狗（其实也不能说是单身狗，因为没有狗能活到26岁），我暂时还不用面临家庭的负担。而且，虽然在外打工，但是全家都在这边，生活上也方便了许多。然而事物都具有两面性，有些小伙伴羡慕我跟父母生活在一起，有人做饭，不用思念想家人。可是你们有没有想过，同是单身狗的你们，一年只有半个月需要面对家里人的压力，而我每天都需要。。。\n　　看着朋友和同学一个个组建起自己的家庭，有一个可爱的宝宝，说不羡慕那是假话。对爱情，也渴望过，也幻想过，但往往被现实给一盆冷水泼醒了。不敢面对生活的压力，害怕自己没有能力承担起一个家庭的责任，迷茫，失落。\n\n## 人际\n>　　最后说说人际.虽然在工作中可能给别人的印象是挺热闹的,其实骨子里还是一个孤独症患者吧.下班后的社交基本为零,除了偶尔跟胡子和包子有点联系,貌似其他的同学和朋友基本没什么往来了,可能大家也快把我遗忘了.而我也只有通过朋友圈和空间的点赞偶尔刷一下存在感了.\n\n# 展望\n* 希望在新的一年里,技术上有所提高,能够跟上互联网快速发展的脚步;\n* 希望在新的一年里,能解决个人问题(`ps:估计希望不大~_~!!`);\n* 希望在新的一年里,朋友圈里看到的都是大家幸福的生活;\n* 希望在新的一年里,世界和平`^_^`!\n\n# 总结\n　　写之前内心感慨很多,感觉自己有很多东西渴望表达,以为自己能写下很多东西,可是当码字的时候却发现不知道该写些什么,不知道该如何表达,那就这样吧.\n\n　　欢迎朋友们在下面的评论区留下你的新年寄语!\n\n　　那么,再见,2016!你好,2017!\n\n---\n　　![](http://ogw774xrt.bkt.clouddn.com/861-1611050U502.png)\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　\n","slug":"再见,2016!","published":1,"updated":"2016-12-31T15:36:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1dph81z000bengt1l3pjize","content":"<blockquote>\n<p>致2016的我!　　　–沃兹基.索德《2016.12.31 22:51:50》</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=26524326&auto=1&height=66\"></iframe>\n\n<h1 id=\"回首\"><a href=\"#回首\" class=\"headerlink\" title=\"回首\"></a>回首</h1><p>　　眼看着2016年又要过完了，有时候仿佛觉得08年北京奥运会还历历在目，一转眼，2016年都结束了，由不得我感慨一句：“时间都去哪了”！明儿就是元旦了，2017马上就要来了。本来想把今天当成普普通通的一天，过去也就过去了，但是思来想去还是做个总结吧，也许不能让我对未来的目标更明确，但起码能让我对过往有一个清晰的认识。</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作:\"></a>工作:</h2><blockquote>\n<p>　　先说说工作吧,大学毕业至今四年不足三年有余，进过车间当检修工，下过工地当施工员，也在家里的饭店打过杂，期间还搁担保公司打过骚扰电话(电话销售)，说实话作为一名电子专业的毕业生，从来没务过正业，感觉也是挺惭愧的。换过这么多行业，最长的待了八个月，最短的仅仅持续了一个月，最后因为听了乔丹的一句话：“Just Do IT！”，稀里糊涂的混进了IT圈。至今工作一年有余，算是工作过最长的行业了，且暂时也没有换行的打算。一直希望自己在这个行业能有所建树，希望到了五十岁，我依然可以敲着键盘听着歌,做一名coder。然而由于天生的惰性吧，虽然心里迫切的想学东西，但是总是在有时间学习的时候，发现手机原来这么好玩，电脑原来好玩，然后就没有然后了。。。。所以时至今日，技术依然是菜的抠脚。以后一定要吸取教训，努力提高自己的技术和能力。</p>\n</blockquote>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活:\"></a>生活:</h2><blockquote>\n<p>　　接着说说生活。作为一名单身狗（其实也不能说是单身狗，因为没有狗能活到26岁），我暂时还不用面临家庭的负担。而且，虽然在外打工，但是全家都在这边，生活上也方便了许多。然而事物都具有两面性，有些小伙伴羡慕我跟父母生活在一起，有人做饭，不用思念想家人。可是你们有没有想过，同是单身狗的你们，一年只有半个月需要面对家里人的压力，而我每天都需要。。。<br>　　看着朋友和同学一个个组建起自己的家庭，有一个可爱的宝宝，说不羡慕那是假话。对爱情，也渴望过，也幻想过，但往往被现实给一盆冷水泼醒了。不敢面对生活的压力，害怕自己没有能力承担起一个家庭的责任，迷茫，失落。</p>\n</blockquote>\n<h2 id=\"人际\"><a href=\"#人际\" class=\"headerlink\" title=\"人际\"></a>人际</h2><blockquote>\n<p>　　最后说说人际.虽然在工作中可能给别人的印象是挺热闹的,其实骨子里还是一个孤独症患者吧.下班后的社交基本为零,除了偶尔跟胡子和包子有点联系,貌似其他的同学和朋友基本没什么往来了,可能大家也快把我遗忘了.而我也只有通过朋友圈和空间的点赞偶尔刷一下存在感了.</p>\n</blockquote>\n<h1 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h1><ul>\n<li>希望在新的一年里,技术上有所提高,能够跟上互联网快速发展的脚步;</li>\n<li>希望在新的一年里,能解决个人问题(<code>ps:估计希望不大~_~!!</code>);</li>\n<li>希望在新的一年里,朋友圈里看到的都是大家幸福的生活;</li>\n<li>希望在新的一年里,世界和平<code>^_^</code>!</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>　　写之前内心感慨很多,感觉自己有很多东西渴望表达,以为自己能写下很多东西,可是当码字的时候却发现不知道该写些什么,不知道该如何表达,那就这样吧.</p>\n<p>　　欢迎朋友们在下面的评论区留下你的新年寄语!</p>\n<p>　　那么,再见,2016!你好,2017!</p>\n<hr>\n<p>　　<img src=\"http://ogw774xrt.bkt.clouddn.com/861-1611050U502.png\" alt=\"\"></p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>致2016的我!　　　–沃兹基.索德《2016.12.31 22:51:50》</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26524326&auto=1&height=66\"></iframe>\n\n<h1 id=\"回首\"><a href=\"#回首\" class=\"headerlink\" title=\"回首\"></a>回首</h1><p>　　眼看着2016年又要过完了，有时候仿佛觉得08年北京奥运会还历历在目，一转眼，2016年都结束了，由不得我感慨一句：“时间都去哪了”！明儿就是元旦了，2017马上就要来了。本来想把今天当成普普通通的一天，过去也就过去了，但是思来想去还是做个总结吧，也许不能让我对未来的目标更明确，但起码能让我对过往有一个清晰的认识。</p>\n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作:\"></a>工作:</h2><blockquote>\n<p>　　先说说工作吧,大学毕业至今四年不足三年有余，进过车间当检修工，下过工地当施工员，也在家里的饭店打过杂，期间还搁担保公司打过骚扰电话(电话销售)，说实话作为一名电子专业的毕业生，从来没务过正业，感觉也是挺惭愧的。换过这么多行业，最长的待了八个月，最短的仅仅持续了一个月，最后因为听了乔丹的一句话：“Just Do IT！”，稀里糊涂的混进了IT圈。至今工作一年有余，算是工作过最长的行业了，且暂时也没有换行的打算。一直希望自己在这个行业能有所建树，希望到了五十岁，我依然可以敲着键盘听着歌,做一名coder。然而由于天生的惰性吧，虽然心里迫切的想学东西，但是总是在有时间学习的时候，发现手机原来这么好玩，电脑原来好玩，然后就没有然后了。。。。所以时至今日，技术依然是菜的抠脚。以后一定要吸取教训，努力提高自己的技术和能力。</p>\n</blockquote>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活:\"></a>生活:</h2><blockquote>\n<p>　　接着说说生活。作为一名单身狗（其实也不能说是单身狗，因为没有狗能活到26岁），我暂时还不用面临家庭的负担。而且，虽然在外打工，但是全家都在这边，生活上也方便了许多。然而事物都具有两面性，有些小伙伴羡慕我跟父母生活在一起，有人做饭，不用思念想家人。可是你们有没有想过，同是单身狗的你们，一年只有半个月需要面对家里人的压力，而我每天都需要。。。<br>　　看着朋友和同学一个个组建起自己的家庭，有一个可爱的宝宝，说不羡慕那是假话。对爱情，也渴望过，也幻想过，但往往被现实给一盆冷水泼醒了。不敢面对生活的压力，害怕自己没有能力承担起一个家庭的责任，迷茫，失落。</p>\n</blockquote>\n<h2 id=\"人际\"><a href=\"#人际\" class=\"headerlink\" title=\"人际\"></a>人际</h2><blockquote>\n<p>　　最后说说人际.虽然在工作中可能给别人的印象是挺热闹的,其实骨子里还是一个孤独症患者吧.下班后的社交基本为零,除了偶尔跟胡子和包子有点联系,貌似其他的同学和朋友基本没什么往来了,可能大家也快把我遗忘了.而我也只有通过朋友圈和空间的点赞偶尔刷一下存在感了.</p>\n</blockquote>\n<h1 id=\"展望\"><a href=\"#展望\" class=\"headerlink\" title=\"展望\"></a>展望</h1><ul>\n<li>希望在新的一年里,技术上有所提高,能够跟上互联网快速发展的脚步;</li>\n<li>希望在新的一年里,能解决个人问题(<code>ps:估计希望不大~_~!!</code>);</li>\n<li>希望在新的一年里,朋友圈里看到的都是大家幸福的生活;</li>\n<li>希望在新的一年里,世界和平<code>^_^</code>!</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>　　写之前内心感慨很多,感觉自己有很多东西渴望表达,以为自己能写下很多东西,可是当码字的时候却发现不知道该写些什么,不知道该如何表达,那就这样吧.</p>\n<p>　　欢迎朋友们在下面的评论区留下你的新年寄语!</p>\n<p>　　那么,再见,2016!你好,2017!</p>\n<hr>\n<p>　　<img src=\"http://ogw774xrt.bkt.clouddn.com/861-1611050U502.png\" alt=\"\"></p>\n<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>\n"},{"title":"spring项目中使用yml作为配置文件的配置方式和属性注入的方法","date":"2017-02-15T12:36:19.000Z","_content":"> 九曲黄河万里沙,浪淘风簸自天涯　　刘禹锡--《浪淘沙·九曲黄河万里沙》\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28661564&auto=1&height=66\"></iframe>\n\n# 使用yml文件的理由\nyml作为配置文件相较于properties文件的优势是可以支持列表,当参数过多的时候properties文件中就会显得很凌乱,而yml文件可以通过多层级关系让文件显得层次分明,更加清爽,如:\nproperties文件\n\n```properties\nredis.ip=192.168.11.1\nredis.port=8080\n```\n\n\nyml文件\n\n```yml\nredis:\n        ip: 192.168.11.1\n        port: 8080\n```\n\n# yml语法\n\n```yml\n普通Key-Value\na: b\n层级\na:\n    b: c\n列表\na: \n    - b: 1\n    - c: 2\n  \n```\n# POM文件引入依赖\n```xml\n<!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml -->\n<dependency>\n    <groupId>org.yaml</groupId>\n    <artifactId>snakeyaml</artifactId>\n    <version>1.17</version>\n</dependency>\n```\n\n# spring配置文件\n```xml\n<bean id=\"configProperties\" class=\"org.springframework.beans.factory.config.YamlPropertiesFactoryBean\">\n        <property name=\"resources\">\n            <list>\n                <value>classpath:filter/${env}.yml</value>\n            </list>\n        </property>\n    </bean>\n    <bean class=\"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer\">\n        <property name=\"properties\" ref=\"configProperties\"/>\n    </bean>    \n```\n\n# 注入属性\n```java\n@Value(\"#{configProperties['jpush.appKey']}\")\n    private String jpush_appKey;\n```\n\n","source":"_posts/spring项目中使用yml作为配置文件的配置方式和属性注入的方法.md","raw":"---\ntitle: spring项目中使用yml作为配置文件的配置方式和属性注入的方法\ndate: 2017-02-15 20:36:19\ntags: [spring,yml]\ncategories: javaweb\n---\n> 九曲黄河万里沙,浪淘风簸自天涯　　刘禹锡--《浪淘沙·九曲黄河万里沙》\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28661564&auto=1&height=66\"></iframe>\n\n# 使用yml文件的理由\nyml作为配置文件相较于properties文件的优势是可以支持列表,当参数过多的时候properties文件中就会显得很凌乱,而yml文件可以通过多层级关系让文件显得层次分明,更加清爽,如:\nproperties文件\n\n```properties\nredis.ip=192.168.11.1\nredis.port=8080\n```\n\n\nyml文件\n\n```yml\nredis:\n        ip: 192.168.11.1\n        port: 8080\n```\n\n# yml语法\n\n```yml\n普通Key-Value\na: b\n层级\na:\n    b: c\n列表\na: \n    - b: 1\n    - c: 2\n  \n```\n# POM文件引入依赖\n```xml\n<!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml -->\n<dependency>\n    <groupId>org.yaml</groupId>\n    <artifactId>snakeyaml</artifactId>\n    <version>1.17</version>\n</dependency>\n```\n\n# spring配置文件\n```xml\n<bean id=\"configProperties\" class=\"org.springframework.beans.factory.config.YamlPropertiesFactoryBean\">\n        <property name=\"resources\">\n            <list>\n                <value>classpath:filter/${env}.yml</value>\n            </list>\n        </property>\n    </bean>\n    <bean class=\"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer\">\n        <property name=\"properties\" ref=\"configProperties\"/>\n    </bean>    \n```\n\n# 注入属性\n```java\n@Value(\"#{configProperties['jpush.appKey']}\")\n    private String jpush_appKey;\n```\n\n","slug":"spring项目中使用yml作为配置文件的配置方式和属性注入的方法","published":1,"updated":"2017-02-23T12:34:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1dph823000dengtawp6e6l6","content":"<blockquote>\n<p>九曲黄河万里沙,浪淘风簸自天涯　　刘禹锡–《浪淘沙·九曲黄河万里沙》</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28661564&auto=1&height=66\"></iframe>\n\n<h1 id=\"使用yml文件的理由\"><a href=\"#使用yml文件的理由\" class=\"headerlink\" title=\"使用yml文件的理由\"></a>使用yml文件的理由</h1><p>yml作为配置文件相较于properties文件的优势是可以支持列表,当参数过多的时候properties文件中就会显得很凌乱,而yml文件可以通过多层级关系让文件显得层次分明,更加清爽,如:<br>properties文件</p>\n<pre class=\" language-properties\"><code class=\"language-properties\"><span class=\"token attr-name\">redis.ip</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">192.168.11.1</span>\n<span class=\"token attr-name\">redis.port</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">8080</span>\n</code></pre>\n<p>yml文件</p>\n<pre class=\" language-yml\"><code class=\"language-yml\">redis:\n        ip: 192.168.11.1\n        port: 8080\n</code></pre>\n<h1 id=\"yml语法\"><a href=\"#yml语法\" class=\"headerlink\" title=\"yml语法\"></a>yml语法</h1><pre class=\" language-yml\"><code class=\"language-yml\">普通Key-Value\na: b\n层级\na:\n    b: c\n列表\na: \n    - b: 1\n    - c: 2\n</code></pre>\n<h1 id=\"POM文件引入依赖\"><a href=\"#POM文件引入依赖\" class=\"headerlink\" title=\"POM文件引入依赖\"></a>POM文件引入依赖</h1><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.yaml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>snakeyaml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h1 id=\"spring配置文件\"><a href=\"#spring配置文件\" class=\"headerlink\" title=\"spring配置文件\"></a>spring配置文件</h1><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>configProperties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.beans.factory.config.YamlPropertiesFactoryBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>resources<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>classpath:filter/${env}.yml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>properties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>configProperties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h1 id=\"注入属性\"><a href=\"#注入属性\" class=\"headerlink\" title=\"注入属性\"></a>注入属性</h1><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#{configProperties['jpush.appKey']}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> String jpush_appKey<span class=\"token punctuation\">;</span>\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>九曲黄河万里沙,浪淘风簸自天涯　　刘禹锡–《浪淘沙·九曲黄河万里沙》</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=28661564&auto=1&height=66\"></iframe>\n\n<h1 id=\"使用yml文件的理由\"><a href=\"#使用yml文件的理由\" class=\"headerlink\" title=\"使用yml文件的理由\"></a>使用yml文件的理由</h1><p>yml作为配置文件相较于properties文件的优势是可以支持列表,当参数过多的时候properties文件中就会显得很凌乱,而yml文件可以通过多层级关系让文件显得层次分明,更加清爽,如:<br>properties文件</p>\n<pre><code class=\"properties\">redis.ip=192.168.11.1\nredis.port=8080\n</code></pre>\n<p>yml文件</p>\n<pre><code class=\"yml\">redis:\n        ip: 192.168.11.1\n        port: 8080\n</code></pre>\n<h1 id=\"yml语法\"><a href=\"#yml语法\" class=\"headerlink\" title=\"yml语法\"></a>yml语法</h1><pre><code class=\"yml\">普通Key-Value\na: b\n层级\na:\n    b: c\n列表\na: \n    - b: 1\n    - c: 2\n</code></pre>\n<h1 id=\"POM文件引入依赖\"><a href=\"#POM文件引入依赖\" class=\"headerlink\" title=\"POM文件引入依赖\"></a>POM文件引入依赖</h1><pre><code class=\"xml\">&lt;!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.yaml&lt;/groupId&gt;\n    &lt;artifactId&gt;snakeyaml&lt;/artifactId&gt;\n    &lt;version&gt;1.17&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h1 id=\"spring配置文件\"><a href=\"#spring配置文件\" class=\"headerlink\" title=\"spring配置文件\"></a>spring配置文件</h1><pre><code class=\"xml\">&lt;bean id=&quot;configProperties&quot; class=&quot;org.springframework.beans.factory.config.YamlPropertiesFactoryBean&quot;&gt;\n        &lt;property name=&quot;resources&quot;&gt;\n            &lt;list&gt;\n                &lt;value&gt;classpath:filter/${env}.yml&lt;/value&gt;\n            &lt;/list&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n    &lt;bean class=&quot;org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer&quot;&gt;\n        &lt;property name=&quot;properties&quot; ref=&quot;configProperties&quot;/&gt;\n    &lt;/bean&gt;\n</code></pre>\n<h1 id=\"注入属性\"><a href=\"#注入属性\" class=\"headerlink\" title=\"注入属性\"></a>注入属性</h1><pre><code class=\"java\">@Value(&quot;#{configProperties[&#39;jpush.appKey&#39;]}&quot;)\n    private String jpush_appKey;\n</code></pre>\n"},{"title":"图片转字符画","date":"2016-11-19T13:47:30.000Z","_content":"> 常羡人间琢玉郎。天应乞与点酥娘　　　--苏轼《定风波·南海归赠王定国侍人寓娘》\n\n### 代码\n前几天学习[springboog文档](http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-banner),无意中发现springboot启动时的图案是可以自己替换的,然后就思考springboot是如何将图片转换成字符画的呢?\n通过查看源码发现在[AutoConfigurationReportLoggingInitializer](http://docs.spring.io/spring-boot/docs/1.0.0.BUILD-SNAPSHOT/api/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.html)类中进行了图片转字符画的操作,将代码抽取出一个工具类`PicToStringUtils`.代码如下:\n```java\npackage com.wang.meng;\n\nimport org.springframework.boot.ansi.*;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.*;\n\n/**\n * Created by wmm on 16/11/19.\n */\npublic class PicToStringUtils {\n    private static final double[] RGB_WEIGHT = {0.2126d, 0.7152d, 0.0722d};\n\n    private static final char[] PIXEL = {' ', '.', '*', ':', 'o', '&', '8', '#', '@'};\n\n    private static final int LUMINANCE_INCREMENT = 10;\n\n    private static final int LUMINANCE_START = LUMINANCE_INCREMENT * PIXEL.length;\n\n    public static void main(String[] args) {\n        try {\n\n            new PicToStringUtils().printBanner(System.out);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void printBanner(PrintStream out)\n            throws IOException {\n\n        int width = 76;\n        int height = 0;\n        int margin = 2;\n        boolean invert = true;\n        BufferedImage image = readImage(width, height);\n        printBanner(image, margin, invert, out);\n    }\n\n    private BufferedImage readImage(int width, int height) throws IOException {\n        Resource resource = new FileSystemResource(\"/Users/wmm/Downloads/daily_pic.jpg\");\n        InputStream inputStream = resource.getInputStream();\n        try {\n            BufferedImage image = ImageIO.read(inputStream);\n            return resizeImage(image, width, height);\n        } finally {\n            inputStream.close();\n        }\n    }\n\n    private BufferedImage resizeImage(BufferedImage image, int width, int height) {\n        if (width < 1) {\n            width = 1;\n        }\n        if (height <= 0) {\n            double aspectRatio = (double) width / image.getWidth() * 0.5;\n            height = (int) Math.ceil(image.getHeight() * aspectRatio);\n        }\n        BufferedImage resized = new BufferedImage(width, height,\n                BufferedImage.TYPE_INT_RGB);\n        Image scaled = image.getScaledInstance(width, height, Image.SCALE_DEFAULT);\n        resized.getGraphics().drawImage(scaled, 0, 0, null);\n        return resized;\n    }\n\n    private void printBanner(BufferedImage image, int margin, boolean invert,\n                             PrintStream out) {\n        AnsiElement background = (invert ? AnsiBackground.BLACK : AnsiBackground.DEFAULT);\n        out.print(AnsiOutput.encode(AnsiColor.DEFAULT));\n        out.print(AnsiOutput.encode(background));\n        out.println();\n        out.println();\n        AnsiColor lastColor = AnsiColor.DEFAULT;\n        for (int y = 0; y < image.getHeight(); y++) {\n            for (int i = 0; i < margin; i++) {\n                out.print(\" \");\n            }\n            for (int x = 0; x < image.getWidth(); x++) {\n                Color color = new Color(image.getRGB(x, y), false);\n                AnsiColor ansiColor = AnsiColors.getClosest(color);\n                if (ansiColor != lastColor) {\n                    out.print(AnsiOutput.encode(ansiColor));\n                    lastColor = ansiColor;\n                }\n                out.print(getAsciiPixel(color, invert));\n            }\n            out.println();\n        }\n        out.print(AnsiOutput.encode(AnsiColor.DEFAULT));\n        out.print(AnsiOutput.encode(AnsiBackground.DEFAULT));\n        out.println();\n    }\n\n    private char getAsciiPixel(Color color, boolean dark) {\n        double luminance = getLuminance(color, dark);\n        for (int i = 0; i < PIXEL.length; i++) {\n            if (luminance >= (LUMINANCE_START - (i * LUMINANCE_INCREMENT))) {\n                return PIXEL[i];\n            }\n        }\n        return PIXEL[PIXEL.length - 1];\n    }\n\n    private int getLuminance(Color color, boolean inverse) {\n        double luminance = 0.0;\n        luminance += getLuminance(color.getRed(), inverse, RGB_WEIGHT[0]);\n        luminance += getLuminance(color.getGreen(), inverse, RGB_WEIGHT[1]);\n        luminance += getLuminance(color.getBlue(), inverse, RGB_WEIGHT[2]);\n        return (int) Math.ceil((luminance / 0xFF) * 100);\n    }\n\n    private double getLuminance(int component, boolean inverse, double weight) {\n        return (inverse ? 0xFF - component : component) * weight;\n    }\n\n}\n```\n### 待转换图片\n![转换前](http://ogw774xrt.bkt.clouddn.com/daily_pic.jpg)\n### 转换后\n![转换后](http://ogw774xrt.bkt.clouddn.com/603BC04F-BC6C-4087-BC32-A9C46807A0D0.png)\n\n\n","source":"_posts/图片转字符画.md","raw":"---\ntitle: 图片转字符画\ndate: 2016-11-19 21:47:30\ntags: [java,Spring-boot]\ncategories: 工具类\n---\n> 常羡人间琢玉郎。天应乞与点酥娘　　　--苏轼《定风波·南海归赠王定国侍人寓娘》\n\n### 代码\n前几天学习[springboog文档](http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-banner),无意中发现springboot启动时的图案是可以自己替换的,然后就思考springboot是如何将图片转换成字符画的呢?\n通过查看源码发现在[AutoConfigurationReportLoggingInitializer](http://docs.spring.io/spring-boot/docs/1.0.0.BUILD-SNAPSHOT/api/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.html)类中进行了图片转字符画的操作,将代码抽取出一个工具类`PicToStringUtils`.代码如下:\n```java\npackage com.wang.meng;\n\nimport org.springframework.boot.ansi.*;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.*;\n\n/**\n * Created by wmm on 16/11/19.\n */\npublic class PicToStringUtils {\n    private static final double[] RGB_WEIGHT = {0.2126d, 0.7152d, 0.0722d};\n\n    private static final char[] PIXEL = {' ', '.', '*', ':', 'o', '&', '8', '#', '@'};\n\n    private static final int LUMINANCE_INCREMENT = 10;\n\n    private static final int LUMINANCE_START = LUMINANCE_INCREMENT * PIXEL.length;\n\n    public static void main(String[] args) {\n        try {\n\n            new PicToStringUtils().printBanner(System.out);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void printBanner(PrintStream out)\n            throws IOException {\n\n        int width = 76;\n        int height = 0;\n        int margin = 2;\n        boolean invert = true;\n        BufferedImage image = readImage(width, height);\n        printBanner(image, margin, invert, out);\n    }\n\n    private BufferedImage readImage(int width, int height) throws IOException {\n        Resource resource = new FileSystemResource(\"/Users/wmm/Downloads/daily_pic.jpg\");\n        InputStream inputStream = resource.getInputStream();\n        try {\n            BufferedImage image = ImageIO.read(inputStream);\n            return resizeImage(image, width, height);\n        } finally {\n            inputStream.close();\n        }\n    }\n\n    private BufferedImage resizeImage(BufferedImage image, int width, int height) {\n        if (width < 1) {\n            width = 1;\n        }\n        if (height <= 0) {\n            double aspectRatio = (double) width / image.getWidth() * 0.5;\n            height = (int) Math.ceil(image.getHeight() * aspectRatio);\n        }\n        BufferedImage resized = new BufferedImage(width, height,\n                BufferedImage.TYPE_INT_RGB);\n        Image scaled = image.getScaledInstance(width, height, Image.SCALE_DEFAULT);\n        resized.getGraphics().drawImage(scaled, 0, 0, null);\n        return resized;\n    }\n\n    private void printBanner(BufferedImage image, int margin, boolean invert,\n                             PrintStream out) {\n        AnsiElement background = (invert ? AnsiBackground.BLACK : AnsiBackground.DEFAULT);\n        out.print(AnsiOutput.encode(AnsiColor.DEFAULT));\n        out.print(AnsiOutput.encode(background));\n        out.println();\n        out.println();\n        AnsiColor lastColor = AnsiColor.DEFAULT;\n        for (int y = 0; y < image.getHeight(); y++) {\n            for (int i = 0; i < margin; i++) {\n                out.print(\" \");\n            }\n            for (int x = 0; x < image.getWidth(); x++) {\n                Color color = new Color(image.getRGB(x, y), false);\n                AnsiColor ansiColor = AnsiColors.getClosest(color);\n                if (ansiColor != lastColor) {\n                    out.print(AnsiOutput.encode(ansiColor));\n                    lastColor = ansiColor;\n                }\n                out.print(getAsciiPixel(color, invert));\n            }\n            out.println();\n        }\n        out.print(AnsiOutput.encode(AnsiColor.DEFAULT));\n        out.print(AnsiOutput.encode(AnsiBackground.DEFAULT));\n        out.println();\n    }\n\n    private char getAsciiPixel(Color color, boolean dark) {\n        double luminance = getLuminance(color, dark);\n        for (int i = 0; i < PIXEL.length; i++) {\n            if (luminance >= (LUMINANCE_START - (i * LUMINANCE_INCREMENT))) {\n                return PIXEL[i];\n            }\n        }\n        return PIXEL[PIXEL.length - 1];\n    }\n\n    private int getLuminance(Color color, boolean inverse) {\n        double luminance = 0.0;\n        luminance += getLuminance(color.getRed(), inverse, RGB_WEIGHT[0]);\n        luminance += getLuminance(color.getGreen(), inverse, RGB_WEIGHT[1]);\n        luminance += getLuminance(color.getBlue(), inverse, RGB_WEIGHT[2]);\n        return (int) Math.ceil((luminance / 0xFF) * 100);\n    }\n\n    private double getLuminance(int component, boolean inverse, double weight) {\n        return (inverse ? 0xFF - component : component) * weight;\n    }\n\n}\n```\n### 待转换图片\n![转换前](http://ogw774xrt.bkt.clouddn.com/daily_pic.jpg)\n### 转换后\n![转换后](http://ogw774xrt.bkt.clouddn.com/603BC04F-BC6C-4087-BC32-A9C46807A0D0.png)\n\n\n","slug":"图片转字符画","published":1,"updated":"2017-02-15T13:02:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1dph827000gengt321d5ki7","content":"<blockquote>\n<p>常羡人间琢玉郎。天应乞与点酥娘　　　–苏轼《定风波·南海归赠王定国侍人寓娘》</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>前几天学习<a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-banner\" target=\"_blank\" rel=\"external\">springboog文档</a>,无意中发现springboot启动时的图案是可以自己替换的,然后就思考springboot是如何将图片转换成字符画的呢?<br>通过查看源码发现在<a href=\"http://docs.spring.io/spring-boot/docs/1.0.0.BUILD-SNAPSHOT/api/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.html\" target=\"_blank\" rel=\"external\">AutoConfigurationReportLoggingInitializer</a>类中进行了图片转字符画的操作,将代码抽取出一个工具类<code>PicToStringUtils</code>.代码如下:</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>wang<span class=\"token punctuation\">.</span>meng<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>ansi<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>FileSystemResource<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>Resource<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> javax<span class=\"token punctuation\">.</span>imageio<span class=\"token punctuation\">.</span>ImageIO<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>BufferedImage<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Created by wmm on 16/11/19.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PicToStringUtils</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> RGB_WEIGHT <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0.2126d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.7152d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0722d</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> PIXEL <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'@'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> LUMINANCE_INCREMENT <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> LUMINANCE_START <span class=\"token operator\">=</span> LUMINANCE_INCREMENT <span class=\"token operator\">*</span> PIXEL<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">PicToStringUtils</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span>PrintStream out<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> <span class=\"token number\">76</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> margin <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">boolean</span> invert <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        BufferedImage image <span class=\"token operator\">=</span> <span class=\"token function\">readImage</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> margin<span class=\"token punctuation\">,</span> invert<span class=\"token punctuation\">,</span> out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> BufferedImage <span class=\"token function\">readImage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        Resource resource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileSystemResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/Users/wmm/Downloads/daily_pic.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        InputStream inputStream <span class=\"token operator\">=</span> resource<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            BufferedImage image <span class=\"token operator\">=</span> ImageIO<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">resizeImage</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> BufferedImage <span class=\"token function\">resizeImage</span><span class=\"token punctuation\">(</span>BufferedImage image<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            width <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">double</span> aspectRatio <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span> width <span class=\"token operator\">/</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n            height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> aspectRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        BufferedImage resized <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedImage</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span>\n                BufferedImage<span class=\"token punctuation\">.</span>TYPE_INT_RGB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Image scaled <span class=\"token operator\">=</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">getScaledInstance</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> Image<span class=\"token punctuation\">.</span>SCALE_DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        resized<span class=\"token punctuation\">.</span><span class=\"token function\">getGraphics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>scaled<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> resized<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printBanner</span><span class=\"token punctuation\">(</span>BufferedImage image<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> margin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> invert<span class=\"token punctuation\">,</span>\n                             PrintStream out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        AnsiElement background <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>invert <span class=\"token operator\">?</span> AnsiBackground<span class=\"token punctuation\">.</span>BLACK <span class=\"token operator\">:</span> AnsiBackground<span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>AnsiOutput<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>AnsiColor<span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>AnsiOutput<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>background<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        AnsiColor lastColor <span class=\"token operator\">=</span> AnsiColor<span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> margin<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> image<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                Color color <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span><span class=\"token function\">getRGB</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                AnsiColor ansiColor <span class=\"token operator\">=</span> AnsiColors<span class=\"token punctuation\">.</span><span class=\"token function\">getClosest</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ansiColor <span class=\"token operator\">!=</span> lastColor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>AnsiOutput<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>ansiColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    lastColor <span class=\"token operator\">=</span> ansiColor<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAsciiPixel</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> invert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>AnsiOutput<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>AnsiColor<span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>AnsiOutput<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>AnsiBackground<span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> <span class=\"token function\">getAsciiPixel</span><span class=\"token punctuation\">(</span>Color color<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> dark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> luminance <span class=\"token operator\">=</span> <span class=\"token function\">getLuminance</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> dark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> PIXEL<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>luminance <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>LUMINANCE_START <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> LUMINANCE_INCREMENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> PIXEL<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> PIXEL<span class=\"token punctuation\">[</span>PIXEL<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getLuminance</span><span class=\"token punctuation\">(</span>Color color<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> inverse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> luminance <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n        luminance <span class=\"token operator\">+=</span> <span class=\"token function\">getLuminance</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">getRed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inverse<span class=\"token punctuation\">,</span> RGB_WEIGHT<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        luminance <span class=\"token operator\">+=</span> <span class=\"token function\">getLuminance</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">getGreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inverse<span class=\"token punctuation\">,</span> RGB_WEIGHT<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        luminance <span class=\"token operator\">+=</span> <span class=\"token function\">getLuminance</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">getBlue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inverse<span class=\"token punctuation\">,</span> RGB_WEIGHT<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>luminance <span class=\"token operator\">/</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getLuminance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> component<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> inverse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>inverse <span class=\"token operator\">?</span> <span class=\"token number\">0xFF</span> <span class=\"token operator\">-</span> component <span class=\"token operator\">:</span> component<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> weight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"待转换图片\"><a href=\"#待转换图片\" class=\"headerlink\" title=\"待转换图片\"></a>待转换图片</h3><p><img src=\"http://ogw774xrt.bkt.clouddn.com/daily_pic.jpg\" alt=\"转换前\"></p>\n<h3 id=\"转换后\"><a href=\"#转换后\" class=\"headerlink\" title=\"转换后\"></a>转换后</h3><p><img src=\"http://ogw774xrt.bkt.clouddn.com/603BC04F-BC6C-4087-BC32-A9C46807A0D0.png\" alt=\"转换后\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>常羡人间琢玉郎。天应乞与点酥娘　　　–苏轼《定风波·南海归赠王定国侍人寓娘》</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>前几天学习<a href=\"http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-banner\">springboog文档</a>,无意中发现springboot启动时的图案是可以自己替换的,然后就思考springboot是如何将图片转换成字符画的呢?<br>通过查看源码发现在<a href=\"http://docs.spring.io/spring-boot/docs/1.0.0.BUILD-SNAPSHOT/api/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.html\">AutoConfigurationReportLoggingInitializer</a>类中进行了图片转字符画的操作,将代码抽取出一个工具类<code>PicToStringUtils</code>.代码如下:</p>\n<pre><code class=\"java\">package com.wang.meng;\n\nimport org.springframework.boot.ansi.*;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.*;\n\n/**\n * Created by wmm on 16/11/19.\n */\npublic class PicToStringUtils {\n    private static final double[] RGB_WEIGHT = {0.2126d, 0.7152d, 0.0722d};\n\n    private static final char[] PIXEL = {&#39; &#39;, &#39;.&#39;, &#39;*&#39;, &#39;:&#39;, &#39;o&#39;, &#39;&amp;&#39;, &#39;8&#39;, &#39;#&#39;, &#39;@&#39;};\n\n    private static final int LUMINANCE_INCREMENT = 10;\n\n    private static final int LUMINANCE_START = LUMINANCE_INCREMENT * PIXEL.length;\n\n    public static void main(String[] args) {\n        try {\n\n            new PicToStringUtils().printBanner(System.out);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void printBanner(PrintStream out)\n            throws IOException {\n\n        int width = 76;\n        int height = 0;\n        int margin = 2;\n        boolean invert = true;\n        BufferedImage image = readImage(width, height);\n        printBanner(image, margin, invert, out);\n    }\n\n    private BufferedImage readImage(int width, int height) throws IOException {\n        Resource resource = new FileSystemResource(&quot;/Users/wmm/Downloads/daily_pic.jpg&quot;);\n        InputStream inputStream = resource.getInputStream();\n        try {\n            BufferedImage image = ImageIO.read(inputStream);\n            return resizeImage(image, width, height);\n        } finally {\n            inputStream.close();\n        }\n    }\n\n    private BufferedImage resizeImage(BufferedImage image, int width, int height) {\n        if (width &lt; 1) {\n            width = 1;\n        }\n        if (height &lt;= 0) {\n            double aspectRatio = (double) width / image.getWidth() * 0.5;\n            height = (int) Math.ceil(image.getHeight() * aspectRatio);\n        }\n        BufferedImage resized = new BufferedImage(width, height,\n                BufferedImage.TYPE_INT_RGB);\n        Image scaled = image.getScaledInstance(width, height, Image.SCALE_DEFAULT);\n        resized.getGraphics().drawImage(scaled, 0, 0, null);\n        return resized;\n    }\n\n    private void printBanner(BufferedImage image, int margin, boolean invert,\n                             PrintStream out) {\n        AnsiElement background = (invert ? AnsiBackground.BLACK : AnsiBackground.DEFAULT);\n        out.print(AnsiOutput.encode(AnsiColor.DEFAULT));\n        out.print(AnsiOutput.encode(background));\n        out.println();\n        out.println();\n        AnsiColor lastColor = AnsiColor.DEFAULT;\n        for (int y = 0; y &lt; image.getHeight(); y++) {\n            for (int i = 0; i &lt; margin; i++) {\n                out.print(&quot; &quot;);\n            }\n            for (int x = 0; x &lt; image.getWidth(); x++) {\n                Color color = new Color(image.getRGB(x, y), false);\n                AnsiColor ansiColor = AnsiColors.getClosest(color);\n                if (ansiColor != lastColor) {\n                    out.print(AnsiOutput.encode(ansiColor));\n                    lastColor = ansiColor;\n                }\n                out.print(getAsciiPixel(color, invert));\n            }\n            out.println();\n        }\n        out.print(AnsiOutput.encode(AnsiColor.DEFAULT));\n        out.print(AnsiOutput.encode(AnsiBackground.DEFAULT));\n        out.println();\n    }\n\n    private char getAsciiPixel(Color color, boolean dark) {\n        double luminance = getLuminance(color, dark);\n        for (int i = 0; i &lt; PIXEL.length; i++) {\n            if (luminance &gt;= (LUMINANCE_START - (i * LUMINANCE_INCREMENT))) {\n                return PIXEL[i];\n            }\n        }\n        return PIXEL[PIXEL.length - 1];\n    }\n\n    private int getLuminance(Color color, boolean inverse) {\n        double luminance = 0.0;\n        luminance += getLuminance(color.getRed(), inverse, RGB_WEIGHT[0]);\n        luminance += getLuminance(color.getGreen(), inverse, RGB_WEIGHT[1]);\n        luminance += getLuminance(color.getBlue(), inverse, RGB_WEIGHT[2]);\n        return (int) Math.ceil((luminance / 0xFF) * 100);\n    }\n\n    private double getLuminance(int component, boolean inverse, double weight) {\n        return (inverse ? 0xFF - component : component) * weight;\n    }\n\n}\n</code></pre>\n<h3 id=\"待转换图片\"><a href=\"#待转换图片\" class=\"headerlink\" title=\"待转换图片\"></a>待转换图片</h3><p><img src=\"http://ogw774xrt.bkt.clouddn.com/daily_pic.jpg\" alt=\"转换前\"></p>\n<h3 id=\"转换后\"><a href=\"#转换后\" class=\"headerlink\" title=\"转换后\"></a>转换后</h3><p><img src=\"http://ogw774xrt.bkt.clouddn.com/603BC04F-BC6C-4087-BC32-A9C46807A0D0.png\" alt=\"转换后\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1dph80m0000engt05h9bw0p","category_id":"cj1dph81a0004engtl5zvignk","_id":"cj1dph822000cengt8d5empt0"},{"post_id":"cj1dph80y0002engtesboodue","category_id":"cj1dph81x0009engt8vegze38","_id":"cj1dph82b000iengtm97ysdkg"},{"post_id":"cj1dph81k0006engtoiaegz6z","category_id":"cj1dph825000eengt28doncx0","_id":"cj1dph82j000mengt5shdc1t6"},{"post_id":"cj1dph81m0007engtfb3053to","category_id":"cj1dph81x0009engt8vegze38","_id":"cj1dph82m000pengt02ynkj2d"},{"post_id":"cj1dph81r0008engtha9s7c88","category_id":"cj1dph82j000nengtfvbpaps8","_id":"cj1dph82q000tengtnelo5akx"},{"post_id":"cj1dph81z000bengt1l3pjize","category_id":"cj1dph82m000qengtv1jjhcbv","_id":"cj1dph82t000yengtx6ifgjux"},{"post_id":"cj1dph823000dengtawp6e6l6","category_id":"cj1dph825000eengt28doncx0","_id":"cj1dph82x0012engtx9p1b6wa"},{"post_id":"cj1dph827000gengt321d5ki7","category_id":"cj1dph82t000zengtbwi6vbjc","_id":"cj1dph82z0016engteepxwykp"}],"PostTag":[{"post_id":"cj1dph80m0000engt05h9bw0p","tag_id":"cj1dph81j0005engtb81vr7jd","_id":"cj1dph829000hengttjfc0s97"},{"post_id":"cj1dph80m0000engt05h9bw0p","tag_id":"cj1dph81x000aengtssti7s00","_id":"cj1dph82c000jengtrm4k2t6d"},{"post_id":"cj1dph80y0002engtesboodue","tag_id":"cj1dph825000fengt9um7y8va","_id":"cj1dph82p000sengtmj7wr657"},{"post_id":"cj1dph80y0002engtesboodue","tag_id":"cj1dph82e000lengtpakidnzb","_id":"cj1dph82q000uengtseeprlgz"},{"post_id":"cj1dph80y0002engtesboodue","tag_id":"cj1dph82k000oengtf79fmewk","_id":"cj1dph82s000xengt2qpakikl"},{"post_id":"cj1dph81k0006engtoiaegz6z","tag_id":"cj1dph81j0005engtb81vr7jd","_id":"cj1dph82v0011engtsni5f8m4"},{"post_id":"cj1dph81k0006engtoiaegz6z","tag_id":"cj1dph82r000wengt2jlxd3jb","_id":"cj1dph82x0013engt20vijfjt"},{"post_id":"cj1dph81m0007engtfb3053to","tag_id":"cj1dph81j0005engtb81vr7jd","_id":"cj1dph82y0015engt7e6brnjj"},{"post_id":"cj1dph81m0007engtfb3053to","tag_id":"cj1dph82u0010engtd4d2kdnj","_id":"cj1dph82z0017engt1xy5t3xz"},{"post_id":"cj1dph81r0008engtha9s7c88","tag_id":"cj1dph82y0014engt0qqsu8ax","_id":"cj1dph836001bengtlnfqger1"},{"post_id":"cj1dph81r0008engtha9s7c88","tag_id":"cj1dph8300018engthnv6xo57","_id":"cj1dph839001cengt992nu0hr"},{"post_id":"cj1dph81r0008engtha9s7c88","tag_id":"cj1dph8330019engt3y6e6bh6","_id":"cj1dph83a001eengtlfcj91y3"},{"post_id":"cj1dph81z000bengt1l3pjize","tag_id":"cj1dph836001aengtuzun78mf","_id":"cj1dph83b001gengtjswbb8sk"},{"post_id":"cj1dph81z000bengt1l3pjize","tag_id":"cj1dph839001dengtie6qhcbd","_id":"cj1dph83c001hengtepyda6v9"},{"post_id":"cj1dph823000dengtawp6e6l6","tag_id":"cj1dph81j0005engtb81vr7jd","_id":"cj1dph83d001jengtwi3g7pxd"},{"post_id":"cj1dph823000dengtawp6e6l6","tag_id":"cj1dph83a001fengtlndjm8vs","_id":"cj1dph83d001kengtcgo9vmgr"},{"post_id":"cj1dph827000gengt321d5ki7","tag_id":"cj1dph82y0014engt0qqsu8ax","_id":"cj1dph83e001mengt4l9p7seq"},{"post_id":"cj1dph827000gengt321d5ki7","tag_id":"cj1dph83e001lengte7m7z25z","_id":"cj1dph83e001nengt9qtw0cfl"}],"Tag":[{"name":"spring","_id":"cj1dph81j0005engtb81vr7jd"},{"name":"aop","_id":"cj1dph81x000aengtssti7s00"},{"name":"hexo","_id":"cj1dph825000fengt9um7y8va"},{"name":"nodejs","_id":"cj1dph82e000lengtpakidnzb"},{"name":"mac","_id":"cj1dph82k000oengtf79fmewk"},{"name":"ioc","_id":"cj1dph82r000wengt2jlxd3jb"},{"name":"profile","_id":"cj1dph82u0010engtd4d2kdnj"},{"name":"java","_id":"cj1dph82y0014engt0qqsu8ax"},{"name":"jvm","_id":"cj1dph8300018engthnv6xo57"},{"name":"脑图","_id":"cj1dph8330019engt3y6e6bh6"},{"name":"年终总结","_id":"cj1dph836001aengtuzun78mf"},{"name":"2016","_id":"cj1dph839001dengtie6qhcbd"},{"name":"yml","_id":"cj1dph83a001fengtlndjm8vs"},{"name":"Spring-boot","_id":"cj1dph83e001lengte7m7z25z"}]}}