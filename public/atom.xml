<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WM的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xn--ltw271ca.xyz/"/>
  <updated>2017-04-11T15:50:33.000Z</updated>
  <id>http://xn--ltw271ca.xyz/</id>
  
  <author>
    <name>Vkery</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java基础拾遗</title>
    <link href="http://xn--ltw271ca.xyz/2017/03/21/java%E5%9F%BA%E7%A1%80%E6%8B%BE%E9%81%97/"/>
    <id>http://xn--ltw271ca.xyz/2017/03/21/java基础拾遗/</id>
    <published>2017-03-21T11:49:18.000Z</published>
    <updated>2017-04-11T15:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>天青色等烟雨,而我在等你　　–方文山《青花瓷》</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29027238&auto=1&height=66"></iframe>

<h1 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h1><p>最近准备梳理一下java基础知识,搞清楚自己到底会哪些,以及有哪些不足,供以后的学习提供一个方向.</p>
<h2 id="正在进行的模块"><a href="#正在进行的模块" class="headerlink" title="正在进行的模块:"></a>正在进行的模块:</h2><ul>
<li>jvm相关</li>
<li>集合框架<h2 id="准备进行的模块"><a href="#准备进行的模块" class="headerlink" title="准备进行的模块:"></a>准备进行的模块:</h2></li>
<li>多线程</li>
<li>设计模式</li>
<li>等..</li>
</ul>
<h2 id="脑图如下-待完成"><a href="#脑图如下-待完成" class="headerlink" title="脑图如下(待完成):"></a>脑图如下(待完成):</h2>

	<div class="row">
    <embed src="/pdf/web开发.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;天青色等烟雨,而我在等你　　–方文山《青花瓷》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; h
    
    </summary>
    
      <category term="java基础" scheme="http://xn--ltw271ca.xyz/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://xn--ltw271ca.xyz/tags/java/"/>
    
      <category term="jvm" scheme="http://xn--ltw271ca.xyz/tags/jvm/"/>
    
      <category term="脑图" scheme="http://xn--ltw271ca.xyz/tags/%E8%84%91%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>spring项目中使用yml作为配置文件的配置方式和属性注入的方法</title>
    <link href="http://xn--ltw271ca.xyz/2017/02/15/spring%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8yml%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E5%92%8C%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://xn--ltw271ca.xyz/2017/02/15/spring项目中使用yml作为配置文件的配置方式和属性注入的方法/</id>
    <published>2017-02-15T12:36:19.000Z</published>
    <updated>2017-04-11T15:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>九曲黄河万里沙,浪淘风簸自天涯　　刘禹锡–《浪淘沙·九曲黄河万里沙》</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28661564&auto=1&height=66"></iframe>

<h1 id="使用yml文件的理由"><a href="#使用yml文件的理由" class="headerlink" title="使用yml文件的理由"></a>使用yml文件的理由</h1><p>yml作为配置文件相较于properties文件的优势是可以支持列表,当参数过多的时候properties文件中就会显得很凌乱,而yml文件可以通过多层级关系让文件显得层次分明,更加清爽,如:<br>properties文件</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">redis.ip</span><span class="token punctuation">=</span><span class="token attr-value">192.168.11.1</span>
<span class="token attr-name">redis.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span>
</code></pre>
<p>yml文件</p>
<pre class=" language-yml"><code class="language-yml">redis:
        ip: 192.168.11.1
        port: 8080
</code></pre>
<h1 id="yml语法"><a href="#yml语法" class="headerlink" title="yml语法"></a>yml语法</h1><pre class=" language-yml"><code class="language-yml">普通Key-Value
a: b
层级
a:
    b: c
列表
a: 
    - b: 1
    - c: 2
</code></pre>
<h1 id="POM文件引入依赖"><a href="#POM文件引入依赖" class="headerlink" title="POM文件引入依赖"></a>POM文件引入依赖</h1><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.yaml/snakeyaml --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.yaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>snakeyaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<h1 id="spring配置文件"><a href="#spring配置文件" class="headerlink" title="spring配置文件"></a>spring配置文件</h1><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configProperties<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.beans.factory.config.YamlPropertiesFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>resources<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>classpath:filter/${env}.yml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configProperties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
</code></pre>
<h1 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h1><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{configProperties['jpush.appKey']}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String jpush_appKey<span class="token punctuation">;</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;九曲黄河万里沙,浪淘风簸自天涯　　刘禹锡–《浪淘沙·九曲黄河万里沙》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; wi
    
    </summary>
    
      <category term="javaweb" scheme="http://xn--ltw271ca.xyz/categories/javaweb/"/>
    
    
      <category term="spring" scheme="http://xn--ltw271ca.xyz/tags/spring/"/>
    
      <category term="yml" scheme="http://xn--ltw271ca.xyz/tags/yml/"/>
    
  </entry>
  
  <entry>
    <title>再见,2016!</title>
    <link href="http://xn--ltw271ca.xyz/2016/12/31/%E5%86%8D%E8%A7%81,2016!/"/>
    <id>http://xn--ltw271ca.xyz/2016/12/31/再见,2016!/</id>
    <published>2016-12-31T13:50:47.000Z</published>
    <updated>2017-04-11T15:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>致2016的我!　　　–沃兹基.索德《2016.12.31 22:51:50》</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26524326&auto=1&height=66"></iframe>

<h1 id="回首"><a href="#回首" class="headerlink" title="回首"></a>回首</h1><p>　　眼看着2016年又要过完了，有时候仿佛觉得08年北京奥运会还历历在目，一转眼，2016年都结束了，由不得我感慨一句：“时间都去哪了”！明儿就是元旦了，2017马上就要来了。本来想把今天当成普普通通的一天，过去也就过去了，但是思来想去还是做个总结吧，也许不能让我对未来的目标更明确，但起码能让我对过往有一个清晰的认识。</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作:"></a>工作:</h2><blockquote>
<p>　　先说说工作吧,大学毕业至今四年不足三年有余，进过车间当检修工，下过工地当施工员，也在家里的饭店打过杂，期间还搁担保公司打过骚扰电话(电话销售)，说实话作为一名电子专业的毕业生，从来没务过正业，感觉也是挺惭愧的。换过这么多行业，最长的待了八个月，最短的仅仅持续了一个月，最后因为听了乔丹的一句话：“Just Do IT！”，稀里糊涂的混进了IT圈。至今工作一年有余，算是工作过最长的行业了，且暂时也没有换行的打算。一直希望自己在这个行业能有所建树，希望到了五十岁，我依然可以敲着键盘听着歌,做一名coder。然而由于天生的惰性吧，虽然心里迫切的想学东西，但是总是在有时间学习的时候，发现手机原来这么好玩，电脑原来好玩，然后就没有然后了。。。。所以时至今日，技术依然是菜的抠脚。以后一定要吸取教训，努力提高自己的技术和能力。</p>
</blockquote>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活:"></a>生活:</h2><blockquote>
<p>　　接着说说生活。作为一名单身狗（其实也不能说是单身狗，因为没有狗能活到26岁），我暂时还不用面临家庭的负担。而且，虽然在外打工，但是全家都在这边，生活上也方便了许多。然而事物都具有两面性，有些小伙伴羡慕我跟父母生活在一起，有人做饭，不用思念想家人。可是你们有没有想过，同是单身狗的你们，一年只有半个月需要面对家里人的压力，而我每天都需要。。。<br>　　看着朋友和同学一个个组建起自己的家庭，有一个可爱的宝宝，说不羡慕那是假话。对爱情，也渴望过，也幻想过，但往往被现实给一盆冷水泼醒了。不敢面对生活的压力，害怕自己没有能力承担起一个家庭的责任，迷茫，失落。</p>
</blockquote>
<h2 id="人际"><a href="#人际" class="headerlink" title="人际"></a>人际</h2><blockquote>
<p>　　最后说说人际.虽然在工作中可能给别人的印象是挺热闹的,其实骨子里还是一个孤独症患者吧.下班后的社交基本为零,除了偶尔跟胡子和包子有点联系,貌似其他的同学和朋友基本没什么往来了,可能大家也快把我遗忘了.而我也只有通过朋友圈和空间的点赞偶尔刷一下存在感了.</p>
</blockquote>
<h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><ul>
<li>希望在新的一年里,技术上有所提高,能够跟上互联网快速发展的脚步;</li>
<li>希望在新的一年里,能解决个人问题(<code>ps:估计希望不大~_~!!</code>);</li>
<li>希望在新的一年里,朋友圈里看到的都是大家幸福的生活;</li>
<li>希望在新的一年里,世界和平<code>^_^</code>!</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　写之前内心感慨很多,感觉自己有很多东西渴望表达,以为自己能写下很多东西,可是当码字的时候却发现不知道该写些什么,不知道该如何表达,那就这样吧.</p>
<p>　　欢迎朋友们在下面的评论区留下你的新年寄语!</p>
<p>　　那么,再见,2016!你好,2017!</p>
<hr>
<p>　　<img src="http://ogw774xrt.bkt.clouddn.com/861-1611050U502.png" alt=""></p>
<p>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;致2016的我!　　　–沃兹基.索德《2016.12.31 22:51:50》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;
    
    </summary>
    
      <category term="个人总结" scheme="http://xn--ltw271ca.xyz/categories/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年终总结" scheme="http://xn--ltw271ca.xyz/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
      <category term="2016" scheme="http://xn--ltw271ca.xyz/tags/2016/"/>
    
  </entry>
  
  <entry>
    <title>profile:spring根据环境动态配置</title>
    <link href="http://xn--ltw271ca.xyz/2016/12/13/profile-spring%E6%A0%B9%E6%8D%AE%E7%8E%AF%E5%A2%83%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE/"/>
    <id>http://xn--ltw271ca.xyz/2016/12/13/profile-spring根据环境动态配置/</id>
    <published>2016-12-13T13:20:13.000Z</published>
    <updated>2017-04-11T15:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>好好学习,天天向上　　　–英语老师说的</p>
</blockquote>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=86369&auto=1&height=66"></iframe></p>
<h1 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h1><pre><code>在不同的开发环境下,可能会出现有的bean在不同的环境下配置不同,如果通过修改配置文件或者代码来做到切换,那势必将增加工作难度和实施的压力.
</code></pre><p>在spring3.1以后引入了profile bean的功能,可以将不同环境下的bean一次定义,然后通过切换对应的profile的激活状态来实现不同环境下bean的动态配置.</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>通过改变不同环境下输出流指向不同的位置测试是否实现了动态切换</p>
<blockquote>
<p>dev环境下,输出流会指向一个文件,将内容打印在文本文件内.<br>pro环境下,输出流会指向控制台,将内容打印控制台上.</p>
</blockquote>
<h3 id="java配置方式"><a href="#java配置方式" class="headerlink" title="java配置方式"></a>java配置方式</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Knight <span class="token function">knight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DamselRescuingKnight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Quest <span class="token function">devQuest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        PrintStream printStream <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            printStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token string">"/Volumes/my space/开发相关/work space/wm/src/main/resources/a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QuestImpl</span><span class="token punctuation">(</span>printStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"pro"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Quest <span class="token function">proQuest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QuestImpl</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> JavaConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfigTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> Knight knight<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        knight<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">knightNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        Assert<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>knight<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="xml配置方式"><a href="#xml配置方式" class="headerlink" title="xml配置方式"></a>xml配置方式</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>knight<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.wang.meng.DamselRescuingKnight<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>devQuestImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.wang.meng.QuestImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_printStream<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{T(System).out}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">profile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>printSteam<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.io.PrintStream<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Volumes/my space/开发相关/work space/wm/src/main/resources/a.txt<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>proQuestImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.wang.meng.QuestImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_printStream<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>printSteam<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minstrel<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.wang.meng.Minstrel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_printStream<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{T(System).out}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minstrel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fight<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* *.fight(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fight<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fight<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
</code></pre>
<h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ActiveProfiles</span><span class="token punctuation">(</span><span class="token string">"pro"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlConfigTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> Knight knight<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        knight<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p>xml配置方式启动报错</p>
<pre class=" language-java"><code class="language-java">Caused by<span class="token operator">:</span> org<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>SAXParseException<span class="token punctuation">;</span> lineNumber<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">;</span> columnNumber<span class="token operator">:</span> <span class="token number">58</span><span class="token punctuation">;</span> cvc<span class="token operator">-</span>complex<span class="token operator">-</span>type<span class="token number">.2</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">.</span>a<span class="token operator">:</span> 发现了以元素 <span class="token string">'bean'</span> 开头的无效内容。应以 <span class="token string">'{"http://www.springframework.org/schema/beans":beans}'</span> 之一开头。
</code></pre>
<p>经排查,如果前边使用了<beans profile="dev">配置了以后,那么后边如果存在不需要动态配置的<bean>,必须用<beans></beans>包裹起来,否侧会报错</bean></beans></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;好好学习,天天向上　　　–英语老师说的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; he
    
    </summary>
    
      <category term="博客" scheme="http://xn--ltw271ca.xyz/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="spring" scheme="http://xn--ltw271ca.xyz/tags/spring/"/>
    
      <category term="profile" scheme="http://xn--ltw271ca.xyz/tags/profile/"/>
    
  </entry>
  
  <entry>
    <title>Spring源码解析学习一</title>
    <link href="http://xn--ltw271ca.xyz/2016/11/22/Spring%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://xn--ltw271ca.xyz/2016/11/22/Spring源码解析学习一/</id>
    <published>2016-11-22T13:34:23.000Z</published>
    <updated>2017-04-11T15:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>欲穷千里目，更上一层楼　　　王之涣–《登黄鹤楼》</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=443242&auto=1&height=66"></iframe>

<h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><p>　　<a href="http://baike.baidu.com/link?url=JWeJwbeWUgHNVPBDar_dHnd4t0pkTjISMgwpwDTgT6IxvMCZ6Vnb_glBEyGJn5v2zShO1h092qk16D2zEq-xGSnhH72-awArnyJXo8YE7lVOwHZ8sOQgN9haMYHeVvIY" target="_blank" rel="external">IOC</a>,又名控制反转(Inversion of Control),即是某一接口具体实现类的选择控制权从调用类中移除，转交给第三方决定.因为IoC确实不够开门见山，因此业界曾进行了广泛的讨论，最终软件界的泰斗级人物Martin Fowler提出了DI（依赖注入：Dependency Injection）的概念用以代替IoC，即让调用类对某一接口实现类的依赖关系由第三方（容器或协作类）注入，以移除调用类对某一接口实现类的依赖。“依赖注入”这个名词显然比“控制反转”直接明了、易于理解。<br>IOC则是容器是Spring实现IOC功能的具体执行者,在Spring中BeanFactory就是我们所说的IOC容器,从这个类名中可以看出它的设计采用了工厂模式,同时它是生产bean的,生产bean干什么呢?当然就是注入依赖了,BeanFactory这个借口主要为了一个最基本的IOC容器提供一个规范.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/* 默认情况下，如果一个Bean是FactoryBean，Spring是会返回其生成的Bean，而不是工厂本身，如果想要得到工厂本身，需要在ID前加&amp;.
    * 例如:PropertiesFactoryBean,@Resource('properties')注入的是是Properties,而@Resource('properties')注入的才
    * 是PropertiesFactoryBean
    */</span>
    String FACTORY_BEAN_PREFIX <span class="token operator">=</span> <span class="token string">"&amp;"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//通过bean的名称在IOC容器中获取bean对象</span>
    Object <span class="token function">getBean</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//通过bean的名称和bean的Class类型来获取bean</span>
    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> aClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//根据bean的Class类型来获取bean对象</span>
    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> aClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//根据名称和多个对象来获取一个bean对象</span>
    Object <span class="token function">getBean</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> objects<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//根据bean的Class类型和多个对象来获取一个bean</span>
    <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> aClass<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> objects<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//判断容器中是否包含名称是s的bean对象</span>
    <span class="token keyword">boolean</span> <span class="token function">containsBean</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//判断一个名称为s的bean对象是否为单例模式,如果容器中没有名称为s的Bean对象会抛出找不到该bean的异常</span>
    <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//判断一个名称为s的bean对象是否为多例模式,如果容器中没有名称为s的Bean对象会抛出找不到该bean的异常</span>
    <span class="token keyword">boolean</span> <span class="token function">isPrototype</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//判断名称为s的bean的Class类型是不是指定的类型</span>
    <span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> ResolvableType resolvableType<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//判断名称为s的bean的Class类型是不是指定的类型</span>
    <span class="token keyword">boolean</span> <span class="token function">isTypeMatch</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取名字为s的bean的Class类型</span>
    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getType</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取名称为s的bean的所有别名</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAliases</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>spring配置文件</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.wang.meng.A<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>A<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.wang.meng.B<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>B<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>
</code></pre>
<p>简单的IOC容器创建并测试一些基本方法.<br>创建过程:</p>
<blockquote>
<ul>
<li>创建IOC配置文件的抽象资源</li>
<li>创建一个BeanFactory</li>
<li>把读取配置信息的Reader配置给BeanFactory</li>
<li>加载配置信息</li>
</ul>
</blockquote>
<pre class=" language-java"><code class="language-java">        ClassPathResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        XmlBeanDefinitionReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称为A的bean是否存在:"</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称为B的bean是否存在:"</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称为C的bean是否存在:"</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过名称A:"</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过别名a1:"</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过别名a2:"</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"a2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过名称和类型:"</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过名称和对象:"</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"a2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A是否是单例模式:"</span><span class="token operator">+</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A是否是多例模式:"</span><span class="token operator">+</span>beanFactory<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称为A的bean是否是A类型:"</span><span class="token operator">+</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span>A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称为A的bean是否是B类型"</span><span class="token operator">+</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span>B<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名称为A的bean的所有别名:"</span><span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>打印结果</p>
<pre><code>23:12:26.945 [main] DEBUG org.springframework.core.env.PropertySourcesPropertyResolver - Could not find key &#39;spring.liveBeansView.mbeanDomain&#39; in any property source
名称为A的bean是否存在:true
名称为B的bean是否存在:true
名称为C的bean是否存在:false
通过名称A:com.wang.meng.A@569cfc36
通过别名a1:com.wang.meng.A@569cfc36
通过别名a2:com.wang.meng.A@569cfc36
通过名称和类型:com.wang.meng.A@569cfc36
通过名称和对象:com.wang.meng.A@569cfc36
A是否是单例模式:true
A是否是多例模式:false
名称为A的bean是否是A类型:true
名称为A的bean是否是B类型false
名称为A的bean的所有别名:[a1, a2]
</code></pre><p>从结果中可以分析出,spring创建的bean默认为单例模式.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;欲穷千里目，更上一层楼　　　王之涣–《登黄鹤楼》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; 
    
    </summary>
    
      <category term="javaweb" scheme="http://xn--ltw271ca.xyz/categories/javaweb/"/>
    
    
      <category term="spring" scheme="http://xn--ltw271ca.xyz/tags/spring/"/>
    
      <category term="ioc" scheme="http://xn--ltw271ca.xyz/tags/ioc/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Aop总结</title>
    <link href="http://xn--ltw271ca.xyz/2016/11/20/Spring-Aop%E6%80%BB%E7%BB%93/"/>
    <id>http://xn--ltw271ca.xyz/2016/11/20/Spring-Aop总结/</id>
    <published>2016-11-20T02:57:48.000Z</published>
    <updated>2017-04-11T15:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>路漫漫其修远兮，吾将上下而求索。　　　屈原–《离骚》</p>
</blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=28661549&auto=1&height=66"></iframe>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　工作也一年出头了,深觉spring在java web开发中的重要地位,而spring-aop又是spring框架提供的一种重要特性,可以极大的提高开发的效率.但是日常工作中却基本没有应用到,深感遗憾,所以整理一些平时网上看到的教程,以备日后不时之需.<br>＞　文中内容基本转载于<a href="https://my.oschina.net/kaywu123/blog/626135" target="_blank" rel="external">水门-kay的spring源码分析</a></p>
<h1 id="Spring-Aop简介"><a href="#Spring-Aop简介" class="headerlink" title="Spring-Aop简介"></a>Spring-Aop简介</h1><p>　　<a href="http://spring.cndocs.tk/aop.html" target="_blank" rel="external">AOP</a>（Aspect-Oriented Programming，面向切面的编程），谈起AOP，则一定会追溯到OOP（Object Oriented Programming,面向对象编程），因为AOP可以说是对OOP的补充和完善，而这一切的理念都是从模块化开始的。OOP是一种非常成功、极具表现力的编程范式，它将概念自然地表达为对象，从而将其中通用的代码模块化。所以，衡量OOP成功与否的标准就是它在多大程度上避免了代码的重复。一般情况下，OOP能够很好地避免代码重复。具体继承可以帮助我们在不同类型之间共享相同的行为；多态让我们可以用同样的方式来处理不同类型之间的对象，能够让我们将注意力集中在他们的共同之处。但当遇上一些特定问题的时候，比如，当我们需要为分散的对象引入公共行为时，OOP就显得很无力了。也就是说，OOP很适合你定义从上到下的关系，但不适合定义水平的关系。可以说因为有这些Bug的存在，是AOP生成的直接诱因，所以是为了弥补OOP而存在的。AOP在看待应用程序结构的方式上与OOP是截然不同的，以AOP的思路来看，系统是被分解成方面（Aspect）或者关注点（Concern），而不是一个个对象。追根溯源，与OOP一样，AOP只不过是一种全新的模块化机制而已，他的主要作用是用来描述分散在对象、类或函数中的横切关注点，从关注点中分离出横切关注点则是 AOP的核心概念。<br>　　AOP的原理，也是非常简单的，即通过分离关注点让解决特定领域问题的代码从业务逻辑中独立出来，业务逻辑的代码中就不再含有针对特定领域问题代码的调用，业务逻辑同特定领域问题的关系则通过切面来封装、维护，这样原本分散在整个应用程序中的代码就可以很好的进行管理了。例如：在使用公共函数的时候，往往需要进行一些逻辑设计，也就时需要代码实现来支持，而这些逻辑代码也是需要维护的，在传统的公共子模块的调用中，除了直接调用以外就没有其他的手段。而相同的情况，在使用AOP后，不仅可以将这些重复的代码抽出来单独维护，而且可以在需要时进行统一调度，这样的使用方法虽然与设计公共子模块有几分相似，但他为这一类问题的解决提供了一整套完整的理论和灵活多样的实现方法。也就是说，在AOP提出横切概念以后，再把模块功能正交化的同时，也在此基础上提供了一系列横切的灵活实现。<br><img src="http://ogw774xrt.bkt.clouddn.com/spring-aop%E7%BB%93%E6%9E%84.png" alt="spring-aop结构"></p>
<h2 id="spring-aop相关术语"><a href="#spring-aop相关术语" class="headerlink" title="spring-aop相关术语"></a>spring-aop相关术语</h2><ul>
<li>目标对象（Target）：包含连接点的对象。也被用来引用增强化或代理化对象。<ul>
<li>代理（Proxy）：AOP 框架创建的对象，包含增强。</li>
<li>连接点（Joinpoint）：程序执行过程中明确的点，如方法的调用或特定的异常被抛出。</li>
<li>切点（Pointcut）：指定一个通知将被引发的一系列连接点。AOP 框架必须允许开发者指定切入点：例如，使用正则表达式。</li>
<li>增强（Advice）：在特定的连接点AOP框架执行的动作。各种类型的增强包括“around”、“before”、“throws”增强等等。增强类型将在下面讨论。许多 AOP 框架都是以拦截器做增强模型，维护一个“围绕”连接点的拦截器链。</li>
<li>切面（Advisor）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。事物管理是J2EE应用中横切关注点中一个很好的例子。切面一般是用 Advisor 或者 拦截器实现。<br>*　织入（Weaving）：组装方面创建通知化对象。这可以在编译时完成（例如：使用AspectJ编译器），也可以在运行时完成。Spring 和其他一些纯 Java AOP 框架，使用运行时织入。</li>
<li>引入（Introduction）：添加方法或字段到增强化类。<br>*　接口（IsModified）：用于简化缓存。（这里作为补充）。</li>
</ul>
</li>
</ul>
<h2 id="spring-aop的应用场景"><a href="#spring-aop的应用场景" class="headerlink" title="spring-aop的应用场景"></a>spring-aop的应用场景</h2><p>　　AOP在 权限（Authentication）、缓存（Cache）、内容传递（Context passing）、错误处理（Error handling）、懒加载（Lazy loading）、调试（Debug）、日志（Log）、跟踪优化和校准（tracing、profiling and monitoring）、性能优化（Performance optimization）、持久化（Persistence）、资源池（Resource pooling）、同步（Synchronization）、事务（Transactions）等方面都有用处，可以说是可使用范围及其广泛.</p>
<h2 id="spring-aop增强类型"><a href="#spring-aop增强类型" class="headerlink" title="spring-aop增强类型"></a>spring-aop增强类型</h2><p>AOP增强类型（也叫 通知类型）包括：</p>
<ul>
<li>Before Advice（前置增强）：在一个连接点之前执行的增强，但这个增强不能阻止流程继续执行到连接点（除非它抛出一个异常）。</li>
<li>After Advice（后置增强，全称是 After returning advice 正常返回增强 ）：在连接点正常完成后执行的增强，例如，如果一个正常返回，没有抛出异常。如果抛出异常则不会执行。</li>
<li>Around Advice（环绕增强）：包围一个连接点的增强，如方法调用，是最强大的增强。在方法调用前后完成自定义的行为。它们负责选择继续执行连接点或直接返回它们自己的返回值或抛出异常来执行。</li>
<li>Throws Advice（抛出增强，全称是 After throwing advice 异常返回增强，也叫 Finally returning advice 最终返回增强）：是最常用的增强类型。大部分是基于拦截器框架如Nanning或者JBoss4提供的Around增强。作用是，不管，是否正常执行，都会返回增强中的内容。</li>
<li>Introduction Advice（引入增强）：一种非常特殊的增强。它将新的成员变量、成员方法引入到目标类中。它仅能作用于类层次，而不是方法层次，所以他不能作用于任何切入点。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;路漫漫其修远兮，吾将上下而求索。　　　屈原–《离骚》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330
    
    </summary>
    
      <category term="spring框架" scheme="http://xn--ltw271ca.xyz/categories/spring%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="spring" scheme="http://xn--ltw271ca.xyz/tags/spring/"/>
    
      <category term="aop" scheme="http://xn--ltw271ca.xyz/tags/aop/"/>
    
  </entry>
  
  <entry>
    <title>图片转字符画</title>
    <link href="http://xn--ltw271ca.xyz/2016/11/19/%E5%9B%BE%E7%89%87%E8%BD%AC%E5%AD%97%E7%AC%A6%E7%94%BB/"/>
    <id>http://xn--ltw271ca.xyz/2016/11/19/图片转字符画/</id>
    <published>2016-11-19T13:47:30.000Z</published>
    <updated>2017-04-11T15:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>常羡人间琢玉郎。天应乞与点酥娘　　　–苏轼《定风波·南海归赠王定国侍人寓娘》</p>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>前几天学习<a href="http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-banner" target="_blank" rel="external">springboog文档</a>,无意中发现springboot启动时的图案是可以自己替换的,然后就思考springboot是如何将图片转换成字符画的呢?<br>通过查看源码发现在<a href="http://docs.spring.io/spring-boot/docs/1.0.0.BUILD-SNAPSHOT/api/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.html" target="_blank" rel="external">AutoConfigurationReportLoggingInitializer</a>类中进行了图片转字符画的操作,将代码抽取出一个工具类<code>PicToStringUtils</code>.代码如下:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wang<span class="token punctuation">.</span>meng<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>ansi<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileSystemResource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by wmm on 16/11/19.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PicToStringUtils</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> RGB_WEIGHT <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0.2126d</span><span class="token punctuation">,</span> <span class="token number">0.7152d</span><span class="token punctuation">,</span> <span class="token number">0.0722d</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> PIXEL <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LUMINANCE_INCREMENT <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LUMINANCE_START <span class="token operator">=</span> LUMINANCE_INCREMENT <span class="token operator">*</span> PIXEL<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>

            <span class="token keyword">new</span> <span class="token class-name">PicToStringUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printBanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>PrintStream out<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>

        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> margin <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> invert <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        BufferedImage image <span class="token operator">=</span> <span class="token function">readImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printBanner</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> margin<span class="token punctuation">,</span> invert<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> BufferedImage <span class="token function">readImage</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
        Resource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token string">"/Users/wmm/Downloads/daily_pic.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        InputStream inputStream <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            BufferedImage image <span class="token operator">=</span> ImageIO<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">resizeImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> BufferedImage <span class="token function">resizeImage</span><span class="token punctuation">(</span>BufferedImage image<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            width <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">double</span> aspectRatio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> width <span class="token operator">/</span> image<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
            height <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> aspectRatio<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        BufferedImage resized <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span>
                BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Image scaled <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">getScaledInstance</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> Image<span class="token punctuation">.</span>SCALE_DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resized<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>scaled<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> resized<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>BufferedImage image<span class="token punctuation">,</span> <span class="token keyword">int</span> margin<span class="token punctuation">,</span> <span class="token keyword">boolean</span> invert<span class="token punctuation">,</span>
                             PrintStream out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AnsiElement background <span class="token operator">=</span> <span class="token punctuation">(</span>invert <span class="token operator">?</span> AnsiBackground<span class="token punctuation">.</span>BLACK <span class="token operator">:</span> AnsiBackground<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>AnsiOutput<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>AnsiColor<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>AnsiOutput<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        AnsiColor lastColor <span class="token operator">=</span> AnsiColor<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> image<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> margin<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> image<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Color color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">getRGB</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                AnsiColor ansiColor <span class="token operator">=</span> AnsiColors<span class="token punctuation">.</span><span class="token function">getClosest</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ansiColor <span class="token operator">!=</span> lastColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>AnsiOutput<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>ansiColor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    lastColor <span class="token operator">=</span> ansiColor<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getAsciiPixel</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> invert<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>AnsiOutput<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>AnsiColor<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>AnsiOutput<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>AnsiBackground<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">char</span> <span class="token function">getAsciiPixel</span><span class="token punctuation">(</span>Color color<span class="token punctuation">,</span> <span class="token keyword">boolean</span> dark<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> luminance <span class="token operator">=</span> <span class="token function">getLuminance</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> dark<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> PIXEL<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>luminance <span class="token operator">>=</span> <span class="token punctuation">(</span>LUMINANCE_START <span class="token operator">-</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> LUMINANCE_INCREMENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> PIXEL<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> PIXEL<span class="token punctuation">[</span>PIXEL<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getLuminance</span><span class="token punctuation">(</span>Color color<span class="token punctuation">,</span> <span class="token keyword">boolean</span> inverse<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">double</span> luminance <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
        luminance <span class="token operator">+=</span> <span class="token function">getLuminance</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">getRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inverse<span class="token punctuation">,</span> RGB_WEIGHT<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        luminance <span class="token operator">+=</span> <span class="token function">getLuminance</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">getGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inverse<span class="token punctuation">,</span> RGB_WEIGHT<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        luminance <span class="token operator">+=</span> <span class="token function">getLuminance</span><span class="token punctuation">(</span>color<span class="token punctuation">.</span><span class="token function">getBlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inverse<span class="token punctuation">,</span> RGB_WEIGHT<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>luminance <span class="token operator">/</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">getLuminance</span><span class="token punctuation">(</span><span class="token keyword">int</span> component<span class="token punctuation">,</span> <span class="token keyword">boolean</span> inverse<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>inverse <span class="token operator">?</span> <span class="token number">0xFF</span> <span class="token operator">-</span> component <span class="token operator">:</span> component<span class="token punctuation">)</span> <span class="token operator">*</span> weight<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre>
<h3 id="待转换图片"><a href="#待转换图片" class="headerlink" title="待转换图片"></a>待转换图片</h3><p><img src="http://ogw774xrt.bkt.clouddn.com/daily_pic.jpg" alt="转换前"></p>
<h3 id="转换后"><a href="#转换后" class="headerlink" title="转换后"></a>转换后</h3><p><img src="http://ogw774xrt.bkt.clouddn.com/603BC04F-BC6C-4087-BC32-A9C46807A0D0.png" alt="转换后"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;常羡人间琢玉郎。天应乞与点酥娘　　　–苏轼《定风波·南海归赠王定国侍人寓娘》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;
    
    </summary>
    
      <category term="工具类" scheme="http://xn--ltw271ca.xyz/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
      <category term="java" scheme="http://xn--ltw271ca.xyz/tags/java/"/>
    
      <category term="Spring-boot" scheme="http://xn--ltw271ca.xyz/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建过程和中间遇到的若干问题</title>
    <link href="http://xn--ltw271ca.xyz/2016/11/19/hexo%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%92%8C%E4%B8%AD%E9%97%B4%E9%81%87%E5%88%B0%E7%9A%84%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98/"/>
    <id>http://xn--ltw271ca.xyz/2016/11/19/hexo搭建过程和中间遇到的若干问题/</id>
    <published>2016-11-19T10:51:53.000Z</published>
    <updated>2017-04-11T15:50:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>竹杖芒鞋轻胜马 一蓑烟雨任平生　　　–苏轼《定风波》</p>
</blockquote>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>　　本来我以前也用hexo搭建过一个博客,但是由于后来工作变得懒惰,加上搭建的时候刚接触到编程,对搭建过程一知半解,也没有很好的保存搭建的文件,github上只剩下编译后的文件,就放弃折腾了.偶然间发现<a href="https://material.vss.im/" target="_blank" rel="external">Material Theme</a>博客,加上本身自己是谷歌脑残粉,用过<em>nexus5</em>和<em>neuxs6</em>,对<a href="http://baike.baidu.com/view/13912767.htm" target="_blank" rel="external">material design</a>本身有莫名的好感,很喜欢这种有质感的设计,于是折腾了一晚上把这个博客搭建起来了.在这里主要记录一下自己在搭建过程中遇到的问题和找到的解决方案,也算为以后再做类似的工作提供一个解决思路.</p>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>　　前往<a href="https://nodejs.org/en/" target="_blank" rel="external">nodejs</a>官网,根据系统下载相应版本的安装包,然后进行安装.安装完成以后通过以下命令检测是否安装成功,如果出现版本号,则证明安装成功.</p>
<pre class=" language-bash"><code class="language-bash">$ node -v
</code></pre>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>　　由于nodejs自带npm功能,可以通过以下命令安装hexo</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo
</code></pre>
<p><a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">hexo文档</a><br> 值得注意的是如果安装进度条一直不动,那是由于npm的安装源是国外的地址,需要翻墙才能正常使用,解决办法是讲npm的源更换到国内的地址,可以通过以下命令将源更换为淘宝的镜像.</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> --registry http://npm.stdyun.com info underscore
</code></pre>
<p>同时在mac系统下如果出现类似下文的报错信息</p>
<pre><code>pm ERR! Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules/npm/node_modules/ansi-styles&#39;
npm ERR!     at Error (native)
npm ERR!  { [Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules/npm/node_modules/ansi-styles&#39;]
npm ERR!   errno: -13,
npm ERR!   code: &#39;EACCES&#39;,
npm ERR!   syscall: &#39;access&#39;,
npm ERR!   path: &#39;/usr/local/lib/node_modules/npm/node_modules/ansi-styles&#39; }
</code></pre><p>则是由于权限不够,需要用sudo权限安装,命令如下:</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo
</code></pre>
<p>　　安装完成以后,新建一个文件夹blog,然后在blog文件夹下打开终端/控制台,执行以下命令:</p>
<pre class=" language-bash"><code class="language-bash">hexo init
</code></pre>
<p>等待hexo初始化完成以后blog文件夹下会出现以下文件,大致介绍一下.</p>
<ul>
<li>themes 顾名思义主题文件夹,安装主题的位置.</li>
<li>source 新建博文和其他相关页面的保存位置.</li>
<li>scaffolds 博文模板保存位置,通过命令<code>hexo new 模板名 &quot;博文名&quot;</code>新建博文,会根据模板生产相应的初始化博文.</li>
<li>public 根据主题相关配置编译markdown格式的博文生成页面的保存位置,也就是说别人所看到的博客所有的内容都在这里.</li>
<li>node_modules hexo相关模块的保存位置.</li>
<li>package.json hexo个模块版本信息.</li>
<li>_config.yml 站点配置文件.配置如博客的名称,作者,语言等相关信息.</li>
</ul>
<p>然后可以开始安装主题了.</p>
<h2 id="安装material-theme"><a href="#安装material-theme" class="headerlink" title="安装material theme"></a>安装material theme</h2><p>　　可以前往<a href="https://material.vss.im/" target="_blank" rel="external">material theme</a>官网查看安装方式以及相关教程,在这里就不一一赘述了,我用的是比较简单的一种方式,如下:</p>
<pre><code>npm install hexo-material
</code></pre><p>安装完成以后,可以在blog/node_modules找到hexo-material文件夹,讲hexo-material文件夹拷贝到blog/themes文件夹下.然后修改blog文件夹里的_config.yml,如下:</p>
<pre class=" language-yml"><code class="language-yml">theme:
  hexo-material
</code></pre>
<h2 id="本地预览博客"><a href="#本地预览博客" class="headerlink" title="本地预览博客"></a>本地预览博客</h2><p>　　一切准备就绪后,可以在本地预览博客,通过以下命令:</p>
<pre class=" language-bash"><code class="language-bash">hexo g <span class="token comment" spellcheck="true">#编译生成</span>
hexo s <span class="token comment" spellcheck="true">#服务启动</span>
</code></pre>
<p>然后访问<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>就可以看到属于你自己的博客了.</p>
<h2 id="安装集成服务"><a href="#安装集成服务" class="headerlink" title="安装集成服务"></a>安装集成服务</h2><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save
</code></pre>
<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> isntall hexo-generator-search --save
</code></pre>
<h2 id="DIY"><a href="#DIY" class="headerlink" title="DIY"></a>DIY</h2><p>　　别急这只是刚刚开始,如果所有人都是这样的那怎么突出这个博客是专属我的呢,接下来让我们进行一些DIY.通过修改blog/themes/hexo-material文件夹下的_config.yml文件进行一下个性化的配置,注意不要跟blog下的_config.yml搞混了哦!可以参考<a href="https://material.vss.im/intro/" target="_blank" rel="external">主题配置</a>个性化你的博客.</p>
<h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>　　博客弄好了,怎么可以不放到网上与大家分享呢,参考以下文档<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">hexo部署</a>,将博客部署到<a href="https://github.com/" target="_blank" rel="external">github</a>,最后绑定好你的域名<a href="http://www.jianshu.com/p/1d427e888dda" target="_blank" rel="external">【Hexo+Github】域名和github绑定的问题</a>,一切大功告成了.<br>　　好了,享受写作的快乐吧!如果有什么问题欢迎留言或者点击侧边栏里的Q ME与我联系.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;竹杖芒鞋轻胜马 一蓑烟雨任平生　　　–苏轼《定风波》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h1&gt;&lt;p&gt;　　本来我以前也用
    
    </summary>
    
      <category term="博客" scheme="http://xn--ltw271ca.xyz/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="http://xn--ltw271ca.xyz/tags/hexo/"/>
    
      <category term="nodejs" scheme="http://xn--ltw271ca.xyz/tags/nodejs/"/>
    
      <category term="mac" scheme="http://xn--ltw271ca.xyz/tags/mac/"/>
    
  </entry>
  
</feed>
